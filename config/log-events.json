/* log-events.json
 *
 * COPYRIGHT (c) 2009 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * This file describes the various events that can be logged by the Manticore system.  The
 * file is split into two logical parts.  The first part defines the version of the file
 * and the second defines the events and their formats.
 *
 * The file is a single JSON object with four fields:
 *
 *	date	-- a string representing the YYYYMMDD date as a hexadecimal literal.
 *
 *	version	-- an array of three integers representing the major, minor, and patch-level
 *		   version numbers of the file.  The version numbers should be increased as
 *		   follows:
 *			-- increase the patch number when changing the description of an event or
 *			   argument, or changing the group structure.
 *			-- increase the minor-version number when adding new events to the end of
 *			   the file.  Such changes should not effect existing logs with the same
 *			   major-version number.
 *			-- increase the major version number when changing the order of events,
 *			   or changing the order, number, or type of arguments of existing events.
 *
 *	events	-- an array of event descriptors.
 *
 * The fields of an event descriptor are
 *
 *	name	-- symbolic name
 *
 *	args	-- an array of argument descriptors.  Each log entry can have up to 20 bytes of
 *		   argument data, which starts at byte 12 of the event object.
 *			name	-- the argument's name
 *			ty	-- the type of the argument.  The types are:
 *					addr	-- 64-bit address or ML value
 *					int	-- 32-bit signed integer
 *					word	-- 32-bit unsigned integer
 *					float	-- 32-bit floating-point number
 *					double	-- 64-bit floating-point number
 *					new-id	-- a new 64-bit event identifier.  This will be
 *						   generated and returned by the logging code.
 *					id	-- 64-bit event identifier
 *					strN	-- N-character string (0 < N <= 20)
 *			loc	-- the offset of the field (in bytes) from the start of the event.
 *				   This field is required when the order of arguments does not
 *				   determine the layout.
 *			desc	-- English-language description of argument
 *
 *	attrs	-- an array of attributes, which are represented by strings.  This field is optional
 *		   and is assumed to be empty if not present.  The recognized attributes are:
 *			src	-- this event is the source of a dependent event and has a new-id
 *				   argument.
 *			pml	-- this event is only generated by PML/BOM code
 *			rt	-- this event is only generated by C code
 *
 *	desc	-- English-language description of event
 */
{
  "date" : "0x20090923",
  "version" : [0, 0, 0],
  "events" : [
      { "name" : "VProcStartIdle",
	"args" : [],
	"desc" : "start idle vproc"
      },
      { "name" : "VProcStartMain",
	"args" : [],
	"desc" : "start main vproc"
      },
      { "name" : "VProcExitMain",
	"args" : [],
	"desc" : "exit main vproc"
      },
      { "name" : "VProcIdle",
	"args" : [],
	"desc" : "vproc going idle"
      },
      { "name" : "VProcSleep",
	"args" : [],
	"desc" : "vproc going to sleep"
      },
      { "name" : "VProcWakeup",
	"args" : [],
	"desc" : "wakeup vproc from sleep/idle"
      },
      { "name" : "PreemptVProc",
	"args" : [
	    {"name" : "vpid", "ty" : "int", "desc" : "ID of the vproc being preempted"}
	  ],
	"attrs" : [],
	"desc" : "time-slice preemption of a vproc"
      },
      { "name" : "PreemptSignal",
	"args" : [],
	"attrs" : ["rt"],
	"desc" : "preemption signal received"
      },
      { "name" : "GCSignal",
	"args" : [
	    {"name" : "id", "ty" : "id", "desc" : "Unique ID of global GC"}
	  ],
	"desc" : "global-GC signal received"
      },
      { "name" : "MinorGCStart",
	"args" : [
	    {"name" : "nAllocBytes", "ty" : "word", "desc" : "number of bytes allocated since last collection"}
	  ],
	"attrs" : ["rt"],
	"desc" : "minor GC starts"
      },
      { "name" : "MinorGCEnd",
	"args" : [
	    {"name" : "nCopiedBytes", "ty" : "word", "desc" : "number of live bytes copied"},
	    {"name" : "nAvailBytes", "ty" : "word", "desc" : "number of bytes available for allocation"}
	  ],
	"attrs" : ["rt"],
	"desc" : "minor GC ends"
      },
      { "name" : "MajorGCStart",
	"args" : [
	    {"name" : "nYoungBytes", "ty" : "word", "desc" : "number of young bytes in local heap"},
	    {"name" : "nOldBytes", "ty" : "word", "desc" : "number of old bytes in local heap"}
	  ],
	"attrs" : ["rt"],
	"desc" : "major GC starts"
      },
      { "name" : "MajorGCEnd",
	"args" : [
	    {"name" : "nCopiedBytes", "ty" : "word", "desc" : "number of live bytes copied"},
	    {"name" : "nAvailBytes", "ty" : "word", "desc" : "number of bytes available for allocation"}
	  ],
	"attrs" : ["rt"],
	"desc" : "major GC ends"
      },
      { "name" : "GlobalGCInit",
	"args" : [
	    {"name" : "id", "ty" : "word", "desc" : "index of collection"},
	    {"name" : "uid", "ty" : "new-id", "desc" : "unique ID of global GC"}
	  ],
	"attrs" : ["src", "rt"],
	"desc" : "global GC initiated"
      },
      { "name" : "GlobalGCEnd",
	"args" : [
	    {"name" : "id", "ty" : "word", "desc" : "index of collection"}
	  ],
	"attrs" : ["rt"],
	"desc" : "global GC finished"
      },
      { "name" : "GlobalGCVPStart",
	"args" : [],
	"attrs" : ["rt"],
	"desc" : "global GC starts for vproc"
      },
      { "name" : "GlobalGCVPDone",
	"args" : [
	    {"name" : "nbytes", "ty" : "word", "desc" : "number of bytes copied"}
	  ],
	"attrs" : ["rt"],
	"desc" : "global GC ends for vproc"
      },
      { "name" : "PromoteStart",
	"args" : [
	    {"name" : "root", "ty" : "addr", "loc" : 16, "desc" : "value being promoted"}
	  ],
	"attrs" : ["rt"],
	"desc" : "object promotion starts"
      },
      { "name" : "PromoteEnd",
	"args" : [
	    {"name" : "nbytes", "ty" : "word", "desc" : "number of bytes promoted"}
	  ],
	"attrs" : ["rt"],
	"desc" : "object promotion ends"
      },
    /* CML thread events */
      { "name" : "ThdSpawn",
	"args" : [
	    {"name" : "id", "ty" : "new-id", "desc" : ""}
	  ],
	"attrs" : ["src", "pml"],
	"desc" : "local thread spawned"
      },
      { "name" : "ThdSpawnOn",
	"args" : [
	    {"name" : "id", "ty" : "new-id", "desc" : ""}
	  ],
	"attrs" : ["src", "pml"],
	"desc" : "remote thread spawned"
      },
      { "name" : "ThdStart",
	"args" : [
	    {"name" : "id", "ty" : "id", "desc" : ""}
	  ],
	"attrs" : ["pml"],
	"desc" : "thread body starts execution"
      },
      { "name" : "ThdExit",
	"args" : [],
	"attrs" : ["pml"],
	"desc" : "thread exits"
      },
    /* CML message-passing events */
      { "name" : "MsgSendOffered",
	"args" : [
	    {"name" : "msgid", "ty" : "new-id", "desc" : "unique ID of message"}
	  ],
	"attrs" : ["src", "pml"],
	"desc" : "blocked message send operation"
      },
      { "name" : "MsgSendResumed",
	"args" : [
	    {"name" : "mgid", "ty" : "id", "desc" : "unique ID of message"}
	  ],
	"attrs" : ["pml"],
	"desc" : "resumed message send operation"
      },
      { "name" : "MsgRecv",
	"args" : [
	    {"name" : "msgid", "ty" : "id", "desc" : "unique ID of received message"}
	  ],
	"attrs" : ["pml"],
	"desc" : "matching message receive operation"
      },
      { "name" : "MsgRecvOffered",
	"args" : [
	    {"name" : "opid", "ty" : "new-id", "desc" : "unique ID of recv operation"}
	  ],
	"attrs" : ["src", "pml"],
	"desc" : "blocked message receive operation"
      },
      { "name" : "MsgRecvResumed",
	"args" : [
	    {"name" : "msgid", "ty" : "id", "desc" : "unique ID of message"},
	    {"name" : "opid", "ty" : "id", "desc" : "unique ID of recv operation"}
	  ],
	"attrs" : ["pml"],
	"desc" : "blocked message receive operation"
      },
      { "name" : "MsgSend",
	"args" : [
	    {"name" : "msgid", "ty" : "new-id", "desc" : "unique ID of message"},
	    {"name" : "id", "ty" : "id", "desc" : "unique ID of recv operation"}
	  ],
	"attrs" : ["src", "pml"],
	"desc" : "matching message send operation"
      },
    /* implicit threading/work-stealing events */
      { "name" : "WSInit",
	"args" : [
	    {"name" : "wgid", "ty" : "new-id", "desc" : "unique ID of work group"}
	 ],
        "attrs" : ["src", "pml"],
	"desc" : "work-stealing group initialization"
      },
      { "name" : "WSTerminate",
	"args" : [
	    {"name" : "wgid", "ty" : "id", "desc" : "unique ID of work group"}
	 ],
        "attrs" : ["pml"],
	"desc" : "work-stealing group termination"
      },
      { "name" : "WSWorkerInit",
        "args" : [
	    {"name" : "wid", "ty" : "new-id", "desc" : "unique ID of the worker"},
	    {"name" : "wgid", "ty" : "id", "desc" : "unique ID of the work group"}
	],
       "attrs" : ["src", "pml"],
       "desc" : "work-stealing worker initialization"
      },
      { "name" : "WSExecute",
       "args" : [
	    {"name" : "wid", "ty" : "id", "desc" : "unique ID of the worker"}
	],
       "attrs" : ["pml"],
       "desc" : "work stealing execution of work items"
      },
      { "name" : "WSPreempted",
        "args" : [
	    {"name" : "wid", "ty" : "id", "desc" : "unique ID of the worker"}
	],
       "attrs" : ["pml"],
       "desc" : "work-stealing worker has been preempted"
      },
     { "name" : "WSThiefSend",
       "args" : [
	    {"name" : "tid", "ty" : "new-id", "desc" : "unique ID of the thief"},
	    {"name" : "wid", "ty" : "id", "desc" : "unique ID of the worker"}
	],
       "attrs" : ["src", "pml"],
       "desc" : "work-stealing thief send"
      },
      { "name" : "WSThiefBegin",
	"args" : [
	     {"name" : "tid", "ty" : "id", "desc" : "unique ID of the thief"},
	     {"name" : "wid", "ty" : "id", "desc" : "unique ID of the worker"}
	 ],
	"attrs" : ["pml"],
	"desc" : "work-stealing thief begins executing on the victim vproc"
       },
      { "name" : "WSThiefEnd",
	"args" : [
	     {"name" : "tid", "ty" : "id", "desc" : "unique ID of the thief"},
	     {"name" : "wid", "ty" : "id", "desc" : "unique ID of the worker"}
	 ],
	"attrs" : ["pml"],
	"desc" : "work-stealing thief ends executing on the victim vproc"
       },
       { "name" : "WSThiefSuccessful",
	 "args" : [
	      {"name" : "tid", "ty" : "id", "desc" : "unique ID of the thief"},
	      {"name" : "wid", "ty" : "id", "desc" : "unique ID of the worker"}
	  ],
	 "attrs" : ["pml"],
	 "desc" : "work-stealing thief successfully stole a work item"
	},
       { "name" : "WSThiefUnsuccessful",
	 "args" : [
	      {"name" : "tid", "ty" : "id", "desc" : "unique ID of the thief"},
	      {"name" : "wid", "ty" : "id", "desc" : "unique ID of the worker"}
	  ],
	 "attrs" : ["pml"],
	 "desc" : "work-stealing thief failed to steal a work item"
	},
       { "name" : "WSSleep",
	 "args" : [
	      {"name" : "wid", "ty" : "id", "desc" : "unique ID of the worker"}
	  ],
	 "attrs" : ["pml"],
	 "desc" : "work-stealing worker goes to sleep"
	},
    /* rope events */
       { "name" : "RopeRebalanceBegin",
	 "args" : [
	      {"name" : "length", "ty" : "int", "desc" : "size of the rope"}
	  ],
	 "attrs" : ["pml"],
	 "desc" : "A rope is being rebalanced."
       },
       { "name" : "RopeRebalanceEnd",
	 "args" : [
	      {"name" : "length", "ty" : "int", "desc" : "size of the rope"}
	  ],
	 "attrs" : ["pml"],
	 "desc" : "A rope is finished being rebalanced."
       }
    ]
}

