(* logging.pml
 *
 * COPYRIGHT (c) 2009 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * HLOps for logging events
 *
 * WARNING: this file is generated; do not edit!!!  Any changes should be
 * applied to src/gen/log-gen/templates/logging_pml.in.
 *)

#include "runtime-offsets.def"
#include "log-events.def"

structure Logging =
  struct

    _primcode (

#ifdef ENABLE_LOGGING

	extern void ASM_GetTimeStamp (void *);
        extern void SwapLogBuffers (void *, void *);

	define @NextLogEventSlow (vp : vproc) : addr(any) =
            fun lp () : addr(any) =
	    	let logBufAdr : addr(any) = vpload(LOG, vp)
		do ccall SwapLogBuffers (vp, logBufAdr)
	    	let logBufAdr : addr(any) = vpload(LOG, vp)
		let nextAdr : addr(any) = AdrAddI32(logBufAdr, LOGBUF_NEXT_OFFSET)
                let nextAdr : addr(int) = (addr(int))nextAdr
		let index : int = I32FetchAndAdd(nextAdr, 1)
		(* in *)
		  if I32Lt(index, LOGBUF_SZ) then
		    let offset : int =
			  I32Add(LOGBUF_START_OFFSET, I32Mul(LOG_EVENT_SZB, index))
		    let bufAddr : addr(any) = AdrAddI32((addr(any))logBufAdr, offset)
		    return (bufAddr)
		  else
                    apply lp ()
            apply lp ()
	  ;

      (* return a pointer to the next event in the buffer *)
	define inline @NextLogEvent (vp : vproc, evt : int) : addr(any) =
	    let logBufAdr : addr(any) = vpload(LOG, vp)
	    let nextAdr : addr(any) = AdrAddI32(logBufAdr, LOGBUF_NEXT_OFFSET)
	    let nextAdr : addr(int) = (addr(int))nextAdr
	    let index : int = I32FetchAndAdd(nextAdr, 1)
	    (* in *)
	      if I32Lt(index, LOGBUF_SZ) then
		let offset : int =
		      I32Add(LOGBUF_START_OFFSET, I32Mul(LOG_EVENT_SZB, index))
		let bufAddr : addr(any) = AdrAddI32((addr(any))logBufAdr, offset)
		return (bufAddr)
	      else
		@NextLogEventSlow (vp)
          ;

      (* allocate a new event record and initialize its timestamp
       * and event fields.  Return a pointer to the event record.
       *)
	define @NewEvent (vp : vproc, evt : int) : addr(any) =
	    let ep : addr(any) = @NextLogEvent(vp, evt)
	    do ccall ASM_GetTimeStamp(ep)
	    do AdrStoreI32((addr(int))AdrAddI32(ep, LOG_EVENT_KIND_OFFSET), evt)
	    return (ep)
	  ;

      (* generate a unique event ID. Return the new ID. *)
	define @NewEventId (vp : vproc) : long =
	    let eidPtr : addr(long) = vpaddr(EVENT_ID, vp)
	    return (I64FetchAndAdd(eidPtr, 1:long))
	  ;

@GENERIC-LOG-HLOPS@

@DUMMY-LOG-HLOPS@

#else /* !ENABLE_LOGGING */

@DUMMY-LOG-HLOPS@

#endif

@WRAPPED-LOG-HLOPS@

      )

@LOG-FUNCTIONS@

  end
