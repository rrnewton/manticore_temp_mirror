/* inline-event-log.h
 *
 * COPYRIGHT (c) 2008 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Inline operations for recording log entries.
 *
 * WARNING: this file is generated; do not edit!!!
 */

#ifndef _INLINE_EVENT_LOG_H_
#define _INLINE_EVENT_LOG_H_

#ifdef ENABLE_LOGGING
#include "log.h"
#include "vproc.h"
#if defined(HAVE_MACH_ABSOLUTE_TIME)
#  include <mach/mach_time.h>
#elif defined(HAVE_CLOCK_GETTIME)
#  include <time.h>
#else
#  include <sys/time.h>
#endif


static char * EventDescArr [] = {
     @EVENT-DESC@
};

static uint16_t EventSizesArr [] = {
    @EVENT-SIZES@
    [EventBlock] = sizeof(uint32_t) + sizeof(uint64_t) + sizeof(uint16_t),
};

STATIC_INLINE void postWord8(EventsBuf *eb, uint8_t i)
{
    *(eb->pos++) = i;
}

STATIC_INLINE void postWord16(EventsBuf *eb, uint16_t i)
{
    postWord8(eb, (uint8_t)(i >> 8));
    postWord8(eb, (uint8_t)i);
}

STATIC_INLINE void postWord32(EventsBuf *eb, uint32_t i)
{
    postWord16(eb, (uint16_t)(i >> 16));
    postWord16(eb, (uint16_t)i);
}

STATIC_INLINE void postWord64(EventsBuf *eb, uint64_t i)
{
    postWord32(eb, (uint32_t)(i >> 32));
    postWord32(eb, (uint32_t)i);
}	      

STATIC_INLINE void postEventType(EventsBuf *eb, uint16_t event_num){
     uint8_t d;
     postWord32(eb, EVENT_ET_BEGIN);
     postWord16(eb, event_num);
     postWord16(eb, EventSizesArr[event_num]);

     const char * desc = EventDescArr[event_num];
     int desclen = strlen(desc);
     postWord32(eb, desclen);
     for(d = 0; d < desclen; d++){
         postWord8(eb, desc[d]);	   
     }
     postWord32(eb, 0);
     postWord32(eb, EVENT_ET_END);
}

STATIC_INLINE void postEventTypes(EventsBuf * eb){
    postWord32(eb, EVENT_HEADER_BEGIN);
    postWord32(eb, EVENT_HET_BEGIN);
    
    uint32_t i;
    for(i = 1; i < NumLogEvents; i++){
	postEventType(eb, i);
    }
    
    postWord32(eb, EVENT_HET_END);
    postWord32(eb, EVENT_HEADER_END);

    postWord32(eb, EVENT_DATA_BEGIN);

}

STATIC_INLINE void ensureRoomForEvent(VProc_t * vp, uint32_t tag)
{
    EventsBuf *eb = vp->event_log;
    uint16_t size = EventSizesArr[tag];
    if(eb->pos + size > eb->begin + eb->size){ //not enough space
	printAndClearEventBuf(vp);
    }
}

/*! \brief set a timestamp field
 *  \param ts the address of the timestamp field
 */
STATIC_INLINE void LogTimestamp (EventsBuf * eb)
{
    uint64_t t = get_elapsed_time();
    postWord64(eb, t);
}

STATIC_INLINE void closeBlockMarker (EventsBuf *ebuf)
{
    uint8_t* save_pos;

    if (ebuf->marker)
    {
        // (type:16, time:64, size:32, end_time:64)

        save_pos = ebuf->pos;
        ebuf->pos = ebuf->marker + sizeof(uint16_t) +
                    sizeof(uint64_t);
        postWord32(ebuf, save_pos - ebuf->marker);
        LogTimestamp(ebuf);
        ebuf->pos = save_pos;
        ebuf->marker = NULL;
    }
}

STATIC_INLINE void postBlockMarker (VProc_t *vp)
{
    EventsBuf * eb = vp->event_log;

    ensureRoomForEvent(vp, EventBlock);

    closeBlockMarker(eb);

    eb->marker = eb->pos;
    postWord16(eb, EventBlock);
    LogTimestamp(eb);
    postWord32(eb,0); // these get filled in later by closeBlockMarker();
    postWord64(eb,0);
    postWord16(eb, vp->id);
}

/*! \brief generate a unique event ID
 *  \param vp the host vproc
 *  \return the new ID.
 */
STATIC_INLINE uint64_t NewEventId (VProc_t *vp)
{
    return vp->eventId++;
}


@GENERIC-LOG-FUNCTIONS@

@LOG-FUNCTIONS@

#else /* !ENABLE_LOGGING */

@DUMMY-LOG-FUNCTIONS@

#endif
#endif /* !_INLINE_LOG_H_ */

