#!/bin/bash
#
# COPYRIGHT (c) 2008 The Manticore Project (http://manticore.cs.uchicago.edu)
# All rights reserved.
#
# To generate timing results, run this script in the benchmark directory with the following
# command-line arguments:
#
#           -b bench_name       name of the benchmark.
#           -f path             path to the pml or mlb file containing the benchmark code.
#           -q seq_path         optional path to the pml or mlb file containing the sequential baseline.
#				The pml file should be located at prog_name/seq_prog_name.pml.
#           -s size		integer size for testing.
#           -l seq_sz		optional integer that specifies when to cut to sequential code.
#           -p num_procs	number of processors.  Using -p 0 uses the sequential baseline if it exists.
#           -n num_trials       number of trials to run the benchmark
#
#  Note that the benchmark code should receive two integer arguments from stdin: the cut-to-sequential size
#  and the input size. The benchmark should print the time elapsed in seconds to stdout. For instance, we 
#  run our benchmark below on an cut-to-sequential size of 1 and an input size of 1024. 
#  $ echo "1 1024" | ./benchmark
#  1.220

GOTO_SEQ_SIZES=""

usage="See comments at the top of the script."
SEQ_PML_PATH=""
while getopts ":b:f:s:p:q:l:n:" options; do
  case $options in
    s ) SIZES="$SIZES $OPTARG";;
    p ) PROCS="$PROCS $OPTARG";;
    f ) PML_PATH="$OPTARG";;
    b ) BENCH_NAME="$OPTARG";;
    l ) GOTO_SEQ_SIZES="$GOTO_SEQ_SIZES $OPTARG";;
    q ) SEQ_PML_PATH="$OPTARG";;
    n ) NUM_TRIALS="$OPTARTG";;
    h ) echo $usage;;
    \? ) echo $usage
         exit 1;;
    * ) echo $usage
          exit 1;;

  esac
done

if [ -z $GOTO_SEQ_SIZES ]; then
   GOTO_SEQ_SIZES="1"
fi

if [ -z "$PROCS" ]; then
    echo "Enter at least one choice for the number of processors"
    exit 1
fi

if [ -z "$NUM_TRIALS" ]; then
   NUM_TRIALS="5"
fi

PROG_EXE=$BENCH_NAME-run

MC="mc"
# compiler flags
MCFLAGS=""
SEQFLAGS="$MCFLAGS -Csequential=true"

DATE=$( date +"%F-%H-%M-%S" )
LOG_FILE_NAME=$BENCH_NAME-$DATE.sml
echo "Logging performance results to $LOG_FILE_NAME"

# compile the sequential version
if [ -z "$SEQ_PML_PATH" ] ; then
    SEQ_PML_PATH=$PML_PATH
fi
SEQ_PROG_EXE=$BENCH_NAME-seq
echo "Compiling sequential program: $MC -o $SEQ_PROG_EXE $SEQFLAGS $SEQ_PML_PATH"
$MC -o $SEQ_PROG_EXE $SEQFLAGS $SEQ_PML_PATH 2> /dev/null

# metadata
ARCH=$( uname -m )
OS=$( uname -s )
MACHINE=$( uname -n )
echo -e "(* $LOG_FILE_NAME *)" >> $LOG_FILE_NAME
echo -e "(* ARCH:\t$ARCH OS:\t$OS MACHINE:\t$MACHINE *)" >> $LOG_FILE_NAME
echo -e "(* MCFLAGS\t$MCFLAGS *)" >> $LOG_FILE_NAME
SVN_REVISION=$( svn info | grep Revision )
echo -e "(* SVN $SVN_REVISION *)" >> $LOG_FILE_NAME
SVN_URL=$( svn info | grep URL )
echo -e "(* SVN $SVN_URL *)" >> $LOG_FILE_NAME
echo -e "(* PML SOURCE FILE: $PML_PATH *)" >> $LOG_FILE_NAME
echo -e "(* The time field is in microseconds. *)" >> $LOG_FILE_NAME
echo -e "(* The size field is the problem size. *)" >> $LOG_FILE_NAME
echo -e "(* The seqCutoff field is the number of elements for which we switch to sequential evaluation. *)" >> $LOG_FILE_NAME

PARFLAGS="$MCFLAGS"
echo "Compiling parallel program: $MC -o $PROG_EXE $PARFLAGS $PML_PATH 2> /dev/null"
$MC -o $PROG_EXE $PARFLAGS $PML_PATH 2> /dev/null

echo -e "val numTrials = $NUM_TRIALS" >> $LOG_FILE_NAME

function print_list {
    echo -e "val $2 = " >> $LOG_FILE_NAME
    for x in $1
    do
	echo -n -e " $x :: " >> $LOG_FILE_NAME
    done
    echo -e "nil" >> $LOG_FILE_NAME
}

print_list "$GOTO_SEQ_SIZES" "seqCutoffs"
print_list "$PROCS" "nProcs"
print_list "$SIZES" "sizes"

echo -e "val results = " >> $LOG_FILE_NAME

for ((i=1;i<=NUM_TRIALS;i+=1)); do
    for seq_sz in $GOTO_SEQ_SIZES
    do
	for p in $PROCS
	do   
	    for s in $SIZES
	    do
		echo "evaluating $PML_PATH for $p processor[s] at image size $s and sequential size $seq_sz"
		echo -n -e "\t\t{ trial=$i,\t\tnProcs=$p,\t\tsize=$s,\t\tseqCutoff=$seq_sz,\t\ttime=" >> $LOG_FILE_NAME
		if [ "$p" -eq "0" ] ; then       
		    echo "$seq_sz $s." | ./$SEQ_PROG_EXE -p 1 >> $LOG_FILE_NAME
		else
		    echo "$seq_sz $s." | ./$PROG_EXE -p $p >> $LOG_FILE_NAME
		fi
		echo -e " } ::" >> $LOG_FILE_NAME
	    done
	done
    done
done

echo -e "\t\tnil" >> $LOG_FILE_NAME

# clean up
rm -f *.ppm *.s $PROG_EXE $SEQ_PROG_EXE $SEQ_PML_PATH.pml $PML_PATH.pml
