(* rope-app.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * For applying an effectful function over the elements 
 * of the leaves of a rope in left-to-right order.
 *)

#include "types.def"
#include "ropes.def"

define @rope-app (args : [(* f *) fun (any / exh -> unit),
                          (* r *) rope] / exh : exh) : unit =

  let f : fun (any / exh -> any) = #0(args)
  let r : rope = #1(args)

  fun listapp (xs : list / exh : exh) : unit = (* FIXME can I make this a noreturn? *)
    case xs 
      of NIL => return (UNIT)
       | CONS(h:any, tl:list) =>
          let _ : unit = apply f (h / exh)
          case tl
            of NIL => return (UNIT)
             | CONS(foo:any, bar:list) => 
                 let u : unit = apply listapp (tl / exh)
                 return (u)
          end
    end

  fun app (r : rope / exh : exh) : unit = 
    case r
      of LEAF(n:int, data:list) => 
           let u : unit = apply listapp (data / exh)
           return (u)
       | CAT(n:int, d:int, r1:rope, r2:rope) =>
           let _ : unit = apply app (r1 / exh)
           let u : unit = apply app (r2 / exh)
       	   return (u)
    end (* case *)

  let u : unit = apply app (r / exh)
  return (u)
;
  
        
