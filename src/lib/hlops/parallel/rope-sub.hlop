(* rope-sub.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * A subscript operator for ropes (which were parrays in the surface program).
 *)

#include "types.def"
#include "ropes.def"

extern void M_Print (void *);

define @rope-sub (arg : [rope, ml_int] / exh : exh) : any =

  let WrongLeaf : exn = (exn) enum(0)
 
  let r : rope     = #0(arg)
  let mln : ml_int = #1(arg)
  let n : int      = unwrap(mln)

  fun getFromList (xs : list, n : int / ) : any =
    let wn : ml_int = wrap(n)
    let tup : [list, ml_int] = alloc (xs, wn)
    let x : any = @list-nth (tup / exh)
    return (x)
  (* end fun getFromList *)

  fun cat2 (s1 : ml_string, s2 : ml_string) : ml_string =
    let tup : [ml_string, ml_string] = alloc (s1, s2)
    let ans : ml_string = @string-concat2 (tup / exh)
    return (ans)
  (* end fun cat2 *)

  fun getFromRope (r : rope, n : int / ) : any =
    case r
      of LEAF (len:int, data:list) =>
           let foundIt : bool = I32Lt (n, len)
           if foundIt
             then 
               let res2 : any = apply getFromList (data, n)
               return (res2)
             else
               (* this else branch prints an error msg and throws an exn *)
               let nStr : ml_string =
                 let ml_n : ml_int = alloc (n)
                 let s : ml_string = @itos (ml_n / exh)
                 return (s)
               let lenStr : ml_string = 
                 let ml_len : ml_int = alloc(len)
                 let s : ml_string = @itos (ml_len / exh)
                 return (s)
               let msg : ml_string =
                 let prefix : ml_string = alloc ("index, then len: ", 17)
                 let comma : ml_string = alloc (",", 1)
                 let s0 : ml_string = apply cat2 (prefix, nStr)
                 let s1 : ml_string = apply cat2 (s0, comma)
                 let s2 : ml_string = apply cat2 (s1, lenStr)
                 let stuff : ml_string = alloc (" <<<<\n", 6)
                 let s3 : ml_string = apply cat2 (s2, stuff)
                 return (s3)
               let _ : unit = @print (msg / exh)
               let msg : ml_string = alloc ("WrongLeaf", 9)
               @fail (msg / exh)
       | CAT (len:int, depth:int, r1:rope, r2:rope) =>
           let leftLen : int = @rope-length-int (r1 / exh)
           let onTheLeft : bool = I32Lt (n, leftLen)
             if onTheLeft
               then
                 let res3 : any = apply getFromRope (r1, n)
                 return (res3)
               else
                 let newN : int = I32Sub (n, leftLen)
                 let res4 : any = apply getFromRope (r2, newN)
                 return (res4)
      end

  let res5 : any = apply getFromRope (r, n)
  return (res5)
;
