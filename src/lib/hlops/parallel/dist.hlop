(* dist.hlop
 *
 * COPYRIGHT (c) 2008 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * An implementation of the dist operator from NESL,
 * dist : int * 'a -> 'a parray (* surface language type *)
 * Replicates a constant n times in given parallel array (i.e. rope).
 *)

#include "types.def"
#include "futures.def"
#include "ropes.def"
#include "debugging.def"

extern void M_Print (void*);

(* use_rw ropes; *)

(* NOTE: This _will_ build a balanced rope, but at present it uses a constant
 * max leaf size of 256. The max leaf size is a compile-time option for the 
 * user and this hlop should be modified to respect that.
 *)

define @dist (args : [ml_int, any] / exh : exh) : rope =

  let x : any = #1(args)

  fun f (n : ml_int / exh : exh) : any = return (x)
  let ml_leafSize : ml_int = wrap(256) (* FIXME! This should come from compiler option. *)
  let ml_lo : ml_int = wrap(1)
  let ml_hi : ml_int = #0(args)
  let ml_step : ml_int = wrap(1)

  let tup : [fun (ml_int / exh -> any), ml_int, ml_int, ml_int, ml_int] =
    alloc (f, ml_leafSize, ml_lo, ml_hi, ml_step)

  let r : rope = @tabD (tup / exh)
  return (r)
;
