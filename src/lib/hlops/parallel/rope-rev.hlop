(* rope-map.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * For mapping a function over the elements of the leaves of a rope in parallel.
 *)

#include "types.def"
#include "futures.def"
#include "ropes.def"
#include "debugging.def"

(* use_rw ropes; *)

extern void M_Print(void*);
extern void M_PrintInt(int);

define inline @rope-rev (r : rope / exh : exh) : rope =

  fun rev (r : rope / ) : rope =
    case r
      of LEAF(len:int, data:list) =>
           let atad:list = @list-rev (data / exh)
           return (LEAF(len, atad))
       | CAT(len:int, depth:int, r1:rope, r2:rope) =>
           fun thunk (u : unit / exh : exh) : rope = apply rev (r2)
           let f2 : future = @future1-spawn (thunk / exh)
           let newR1 : rope = apply rev (r1)
           let newR2 : rope = @future1-touch (f2 / exh)
           return (CAT(len, depth, newR2, newR1))
    end (* case *)
    (* end definition of rev *)

  let newR : rope = apply rev (r)
  return (newR)
;
  
        
