(* ivar-get.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * get function for i-variable.
 *)

#include "ivar.def"
#include "debugging.def"

define inline @ivar-get (ivar : ivar / exh : exh) : any =
    let readList : list = #0(ivar)
    let readFlag : int = I32FetchAndAdd(&2(ivar), 1)
    let value : any = #1(ivar)
    let fgs : fgs = @get-fgs(host_vproc / exh)
    if Equal(value, IVAR_EMPTY_VAL)
       then
          (* atomic update, kinda like fetch and increment *)
          cont k (x : any) = 
               return (x)
          let blockedThread : blocked_thread = alloc (fgs, k)
          (* atomic update *)
          fun loop () : () = 
             let blocks : list = #0(ivar)
             let newBlocks : list = CONS(blockedThread, blocks)
             let newBlocks : list = promote(newBlocks)
             let blocked : any = CAS(&0(ivar), blocks, newBlocks)
             if Equal(blocked, blocks)
               then return () 
               else apply loop ()
          do apply loop()
          let _ : int = I32FetchAndAdd(&2(ivar), -1)
          @thread-exit(/exh)
        else
          let _ : int = I32FetchAndAdd(&2(ivar), -1)
          return (value)
;
