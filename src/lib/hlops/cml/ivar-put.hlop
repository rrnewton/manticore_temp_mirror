(* ivar-put.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * put function for i-variable.
 *)

#include "ivar.def"

define @enqueue (vp : vproc, tid : tid, fiber : fiber / exh : exh) : ();
define @forward (vp : vproc, sig : signal / exh : exh) noreturn;

define inline @ivar-put (arg : [ivar, any] / exh : exh) : unit = 
    let ivar : ivar = #0(arg)
    let x : any = #1(arg)
    let readL : list = #0(ivar)
    let readflag : int = #2(ivar)
    let oldValue : any = CAS (&1(ivar), enum(0), x)
    let dummyTid : tid = enum(0)
    case oldValue
     of enum(0) =>
          fun spin () : () =
        	if BEq(#2(ivar), 0)
		  then return ()
		  else apply spin ()
          do apply spin ()
          case readL
           of enum(0) => return ()
            | CONS(hd : any, tl : list) =>                      
        	let fiber : cont(any) = #1(([int, cont(any)])hd)
        	do @enqueue(host_vproc, dummyTid, fiber / exh)
        	fun wakeRead(l : list) : () =
                      case l 
                	of enum(0) => return ()
                	 | CONS(hd' : any, tl' : list) =>
                             let fiber' : cont(any) = #1(([int, cont(any)])hd')
                             let k : cont(any) = throw fiber'(x) 
                             do @enqueue(host_vproc, dummyTid, k / exh)
                             apply wakeRead(tl')
                       end
        	do apply wakeRead(tl)
        	return () 
          end
      | _ => 
          let vp : vproc = host_vproc
          @forward (vp, STOP)
    end
;
