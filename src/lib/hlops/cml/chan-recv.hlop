(* chan-recv.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Receive a message from a channel.
 *)

#include "events.def"
#include "debugging.def"

define @chan-acquire-lock (ch : chan / _ : exh) : ();
define @chan-release-lock (ch : chan / _ : exh) : ();
define @event-claim (flg : dirty_flag / exh : exh) : bool;
define @atomic-enqueue (fgs : fgs, fiber : fiber / exh : exh) : ();
define @chan-dequeue-send (ch : chan / exh : exh) : option;
define @chan-enqueue-recv (ch : chan, flg : dirty_flag, fgs : fgs, k : cont(any) / _ : exh) : ();

define @chan-recv (ch : chan / exh : exh) : any =
    let fgs : fgs = @get-fgs(host_vproc / exh)
    do @chan-acquire-lock (ch / exh)
    let maybeItem : option = @chan-dequeue-send (ch / exh)
    (* in *)
      case maybeItem
       of SOME(item : sendq_item) =>
	    do @chan-release-lock (ch / exh)
	    do @atomic-enqueue (#1(item), #2(item) / exh)
	    (* in *)
	      return (#0(item))
	| NONE =>
	    cont recvK (x : any) = return (x)
	    (* in *)
	      let flag : dirty_flag = alloc(WAITING_EVT)
              let flag : dirty_flag = promote (flag)
	      do @chan-enqueue-recv (ch, flag, fgs, recvK / exh)
	      do @chan-release-lock (ch / exh)
	      (* in *)
                @thread-exit(/exh)
      end
;
