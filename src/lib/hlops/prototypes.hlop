(* prototypes.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * This file contains prototypes for HLOPs that have global scope.
 *)

#include "types.def"
#include "futures.def"
#include "ropes.def"
#include "fgs.def"
#include "ivar.def"
#include "ltc.def"
#include "scheduling-ops.def"

define @print (s : ml_string / exh : exh) : unit;
define @string-concat2 (arg : [ml_string, ml_string] / _ : exh) : ml_string;
define @string-concat-with (arg : [ml_string, list] / exh : exh) : ml_string;
define @string-concat-list (arg : list / _ :exh) : ml_string;
define @itos (n : ml_int / exh : exh) : ml_string;
define @ltos (n : ml_long / exh : exh) : ml_string;
define @string-lit (s : string_data, len : int) : ml_string;
define @float-cos (arg : ml_float / exh : exh) : ml_float;
define @float-sin (arg : ml_float / exh : exh) : ml_float;
define @float-tan (arg : ml_float / exh : exh) : ml_float;
define @float-pow (arg : [ml_float, ml_float] / exh : exh) : ml_float;
define @double-cos (arg : ml_double / exh : exh) : ml_double;
define @double-sin (arg : ml_double / exh : exh) : ml_double;
define @double-tan (arg : ml_double / exh : exh) : ml_double;
define @double-pow (arg : [ml_double, ml_double] / exh : exh) : ml_double;
define @int-min (a : int, b : int / exh : exh) : int;
define @int-max (a : int, b : int / exh : exh) : int;
define @gettimeofday (_ : unit / _ : exh) : ml_double;
define @read-int (_ : unit / _ : exh) : ml_int;
define @compose (fg:[fun(any/exh->any),fun(any/exh->any)] / exh:exh) : fun(any/exh->any);
define @list-append (arg : [list, list] / exh : exh) : list;
define @list-length (xs : list / exh : exh) : ml_int;
define @list-rev (xs : list / exh : exh) : list;
define @list-nth (args: [list, ml_int] / exh : exh) : any;
define @list-map (args: [fun(any/exh->any), list] / exh:exh) : list;
define @list-sublist (xs : list, start : int, length : int / exh : exh) : list;
define @list-map-2 (arg : [fun ([any, any] / exh -> any), list, list] / exh : exh) : list;
(* random numbers*)
define @drand (lo : ml_double, hi : ml_double / exh : exh) : ml_double;

define @list-app (args: [fun(any/exh->unit), list] / exh:exh) : unit;
define @list-foldl (args: [fun([any,any]/exh->any), any, list] / exh:exh) : any;
define @list-foldr (args: [fun([any,any]/exh->any), any, list] / exh:exh) : any;
define @list-tab (args: [fun(ml_int/exh->any), ml_int, ml_int, ml_int] / exh:exh) : list;

define @fail (arg : ml_string / exh : exh) : any;
define @todo (thing : ml_string / exh : exh) : any;

(* ropes *)
define @rope-app (args : [fun(any/exh->unit), rope] / exh:exh) : unit;
define @rope-depth (r : rope / exh : exh) : ml_int;
define @rope-from-leaves (leaves : list / exh : exh) : rope;
define @rope-length (r : rope / exh : exh) : ml_int;
define @rope-length-int (r : rope / exh : exh) : int;
define @rope-map (args : [fun (any / exh -> any), rope] / exh : exh) : rope;
define @rope-map-2 (args : [fun (any / exh -> fun (any / exh -> any)), rope, rope] / exh : exh) : rope;
define @rope-map-2-alt (args : [fun ([any, any] / exh -> any), rope, rope] / exh : exh) : rope;
define @rope-reduce (args : [fun ([any, any] / exh -> any), any, rope] / exh : exh) : any;
define @rope-sum (r : rope / exh : exh) : ml_int;
define @simple-cat (r1 : rope, r2 : rope / exh : exh) : rope;
define @tabD (agrs: [fun(ml_int/exh->any), ml_int, ml_int, ml_int, ml_int] / exh:exh) : rope;

define @generic-hlop-test (n : int / exh : exh) : any;

(* testing operations *)
define @wait (secs : double, done : ![bool] / exh : exh) : ();
define @test-deadlock (f : fun (unit / exh -> bool), waitSecs : double, exhDeadlock : exh, exhIncorrectAns : exh / exh : exh) : ();

(* exported first-class continuations *)
define @callcc (arg : fun(cont(any) / exh -> any) / exh : exh) : any;
define @throwcc (arg : [cont(any), any] / exh : exh) : any;
