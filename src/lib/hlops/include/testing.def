(* testing.def
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Testing stubs.
 *)

#ifndef _TESTING_DEF_
#define _TESTING_DEF_

#include "types.def"
#include "assert.def"
#include "debugging.def"

#ifdef NDEBUG
#define do_test(test)
#define do_concurrent_test(hlop)
#else

extern void M_PrintTestingMsg (void*, void*, int);

(* test a sequential program *)
#define do_test(test)			                                            \
	let b : bool = @test(/exh)	                                            \
        do if Equal(b,FALSE)                                                        \
              then do ccall M_PrintTestingMsg ("Answer", __FILE__, __LINE__)        \
                   return ()                                                        \
              else return ()                                                        \
	do assert(Equal(b,TRUE))                                                    \

(* test a concurrent program, waiting wait_secs until declaring deadlock *)
#define do_concurrent_test(hlop, wait_secs)                                      \
        cont exhDeadlock (_ : any) =                                             \
             do ccall M_PrintTestingMsg ("Deadlock", __FILE__, __LINE__)         \
             assert (FALSE)                                                      \
        cont exhIncorrectAns (_ : any) =                                         \
             do ccall M_PrintTestingMsg ("Answer", __FILE__, __LINE__)           \
             assert (FALSE)                                                      \
        fun f (_ : unit / exh : exh) : bool =                                    \
              @hlop (/exh)                                                       \
        do @test-deadlock (f, wait_secs, exhDeadlock, exhIncorrectAns / exh)     \

#endif

#endif /*! _TESTING_DEF_ */
