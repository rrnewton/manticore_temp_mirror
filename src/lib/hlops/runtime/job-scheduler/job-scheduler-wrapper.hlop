(* job-scheduler-wrapper.hlop
 * 
 * COPYRIGHT (c) 2008 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Wraps a fiber in another fiber that handles job scheduling.
 *)

#include "types.def"
#include "tags.def"
#include "debugging.def"
#include "fgs.def"
#include "logging.def"
#include "scheduling-ops.def"

define @job-scheduler-wrapper (j : int,                                      (* job id *)
			       fgs : fgs,                                    (* fgs for the job *)
			       threadManager : cont(int, int, fiber, fiber),    (* upcall into the thread manager *)
			       k : fiber) : fiber =                          (* scheduler to wrap *)


  cont wrapper (s : signal) = 

       let fgs : fgs = @get-fgs(host_vproc/exh)
       let desire : option = @assoc-list-query(tag(desire), fgs / exh)

       let k : fiber = (fiber)s

       do case desire
	   of NONE => return()
	    | SOME (changeDesire : [int, fiber, fiber]) =>
	      cont resumeK' (_ : unit) = 
                cont k(_ : unit) = throw resumeK(UNIT)
                @run(host_vproc, wrapper, fgs, k / exh)
	      cont suspendK' (_ : unit) = 
                cont k(_ : unit) = throw suspendK(UNIT)
                @run(host_vproc, wrapper, fgs, k / exh)
              throw threadManager(j, d, resumeK', suspendK')
           end

       if Equal(s, STOP) 
	  then @forward(host_vproc, STOP / exh)
          else @atomic-yield(host_vproc / exh)
	       @run(host_vproc, wrapper, fgs, k / exh)

  cont kWrapper (_ : unit) =
       @run(host_vproc, wrapper, fgs, k / exh)

  return(kWrapper)

;
