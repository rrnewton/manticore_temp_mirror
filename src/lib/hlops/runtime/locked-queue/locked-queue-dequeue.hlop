(* locked-queue-dequeue.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Non-blocking locked dequeue.
 *)

#include "locked-queue.def"
#include "../synch/spin-lock-fn.hlop"
define_spin_lock(lq, locked_queue, LOCKED_QUEUE_LOCK)

define @locked-queue-dequeue (q : locked_queue / exh : exh) : option =
  
  let _ : unit = @spin-lock-lq (q / exh)

    let qTl : queue_elt = SELECT(LOCKED_QUEUE_TL, q)
    let qHd : queue_elt = SELECT(LOCKED_QUEUE_HD, q)
    if Equal (qHd, LOCKED_QUEUE_EMPTY)
       then (* the queue is empty *)
            let _ : unit = @spin-unlock-lq (q / exh)
            return (NONE)
       else (* the queue is nonempty, so take an element off the queue head *)
            let qNext : any = SELECT(QUEUE_ELT_TL, qHd)
            let qNext : queue_elt = (queue_elt)qNext
            do if Equal (qHd, qTl)
                  then (* there is one element on the queue, so clear out the tail *)
                       let emptyQ : queue_elt = (queue_elt)LOCKED_QUEUE_EMPTY
                       do UPDATE(LOCKED_QUEUE_TL, q, emptyQ)
                       return ()
                  else return ()
            do UPDATE(LOCKED_QUEUE_HD, q, qNext)
            let elt : any = SELECT(QUEUE_ELT_HD, qHd)
            let _ : unit = @spin-unlock-lq (q / exh)
            let v : option = SOME (elt)
            return (v)
;
