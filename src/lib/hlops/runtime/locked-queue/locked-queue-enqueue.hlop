(* locked-queue-enqueue.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Enqueue an element.
 *)

#include "locked-queue.def"
#include "vproc-queue.def"
#include "../synch/spin-lock-fn.hlop"
define_spin_lock(lq,locked_queue,LOCKED_QUEUE_LOCK)


define @locked-queue-enqueue (q : locked_queue, elt : any / exh : exh) : () =

(* promote elt *before* acquiring the lock *)
  let elt : any = promote (elt)

  let _ : unit = @spin-lock-lq (q / exh)

   (* exit the enqueue operation *)
    cont exitK () = 
         let _ : unit = @spin-unlock-lq (q / exh)
         return ()

   (* place an element at the queue tail *)
    fun queueSnoc (elt : any, qt : queue_elt / exh : exh) : queue_elt =       
	let qElt : queue_elt = alloc (elt, LOCKED_QUEUE_EMPTY)
        let qElt : queue_elt = promote (qElt)
	do if Equal (qt, LOCKED_QUEUE_EMPTY) 
	      then return () 
	      else let qElt : any = (any)qElt
                   do UPDATE(QUEUE_ELT_TL, qt, qElt)
		   return ()
	return (qElt)

   (* check for blocked threads*)
    let bqHd : queue_elt = SELECT(LOCKED_QUEUE_BLOCKED_HD, q)
    do if Equal (bqHd, NIL)
       then return ()
       else (* dequeue from the blocked queue *)
            let bqTl : queue_elt = SELECT(LOCKED_QUEUE_BLOCKED_TL, q)
            let bqNext : any = SELECT(QUEUE_ELT_TL, bqTl)
            let bqNext : queue_elt = (queue_elt)bqNext
            do if Equal (bqHd, bqTl)
                  then let emptyQ : queue_elt = (queue_elt)LOCKED_QUEUE_EMPTY
		       do UPDATE(LOCKED_QUEUE_BLOCKED_TL, q, emptyQ)
                       return ()
                  else return ()
            do UPDATE(LOCKED_QUEUE_BLOCKED_HD, q, bqNext)
            let blockedThread : [cont(any), fgs] = SELECT(QUEUE_ELT_HD, bqHd)
            (* enqueue a fiber that resumes the thread with the queue value *)
            let blockedK : cont(any) = #0(blockedThread)
            let blockedFGS : fgs = #1(blockedThread)
            cont k (x : unit) = throw blockedK (elt)
            do @enqueue (host_vproc, blockedFGS, k / exh)
            (* nothing left to do here *)
            throw exitK ()

    let qHd : queue_elt = SELECT(LOCKED_QUEUE_HD, q)
    let qTl : queue_elt = SELECT(LOCKED_QUEUE_TL, q)
    let qTl : queue_elt = apply queueSnoc (elt, qTl / exh)

    do UPDATE(LOCKED_QUEUE_TL, q, qTl)
    do if Equal (qHd, LOCKED_QUEUE_EMPTY) 
          then (* the queue was empty *)
               do UPDATE(LOCKED_QUEUE_HD, q, qTl)
               return ()
          else return ()

  let _ : unit = @spin-unlock-lq (q / exh)

  return ()
;
