(* locked-queue-blocking-dequeue.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Blocking dequeue.
 *)

#include "locked-queue.def"
#include "locked-queue-local.def"
#include "assert.def"
#include "debugging.def"

define @locked-queue-blocking-dequeue (q : locked_queue / exh : exh) : any =

  (* TODO: add a fast track for when the queue is not empty and fall back to the slow track
   * below otherwise.
   *)
  cont blockedK (v : any) = return (v)
  let blockedK : cont(any) = promote (blockedK)
  let fgs : fgs = @get-fgs (host_vproc / exh)
  let blockedThread : blocked_thread = LOCKED_QUEUE_BLOCKED_THREAD_NEW(blockedK, fgs)
  let bqElt : in_place_queue_elt = LOCKED_QUEUE_NEW_ELT(blockedThread)
  let bqElt : in_place_queue_elt = promote(bqElt)

  let mask : bool = @spin-lock-lq (q / exh)
  
  cont none () = 
       do @in-place-enq-tl-bq (q, bqElt / exh)
       let _ : unit = @spin-unlock-lq (q, mask / exh)
       @thread-exit (/ exh)
  cont some (elt : any) =
       let _ : unit = @spin-unlock-lq (q, mask / exh)
       return (elt)

  (* FIXME: this function can cause allocations for the none and some continuations while
   * holding the lock... 
   *)
  do @in-place-deq-hd-lq (q, none, some / exh)
  do assert(FALSE)
  throw exh(NIL)
;
