(*
 * Run me by saying
 *    mc -Cdebug=true -Cscheduler=the-test triv.pml
 *) 

#include "the.def"
#include "testing.def"
#include "vproc-queue.def"
#include "runtime-offsets.def"

define @work-stealers-startup ( / exh : exh) : ();

define @test-pops(/ exh: exh) : bool =
  cont fail () = return(FALSE)

  let deq : the_deque = @the(/exh)

  let elt0 : ml_int = wrap(999)
  do @the-push-tl(deq, elt0/ exh)
  let elt1 : ml_int = wrap(123)
  do @the-push-tl(deq, elt1/ exh)

  let eltp1 : option = @the-pop-tl(deq/ exh)
  let eltp1 : ml_int = VAL_OF(eltp1, ml_int, exh)
  do if I32Eq(unwrap(eltp1), unwrap(elt1))
        then return()
        else throw fail()

  let elt3 : option = @the-pop-hd(deq/ exh)
  let elt3 : ml_int = VAL_OF(elt3, ml_int, exh)

  return(I32Eq(unwrap(elt0), unwrap(elt3)))
;

define @test-pop(/ exh: exh) : bool =
  let deq : the_deque = @the(/exh)

  let elt0 : ml_int = wrap(999)
  do @the-push-tl(deq, elt0/ exh)
  let elt1 : ml_int = wrap(123)
  do @the-push-tl(deq, elt1/ exh)
  let elt2 : ml_int = wrap(1222)
  do @the-push-tl(deq, elt2/ exh)
  let elt3 : option = @the-pop-hd(deq/ exh)
  let elt3 : ml_int = VAL_OF(elt3, ml_int, exh)

  return(I32Eq(unwrap(elt0), unwrap(elt3)))
;

define @test2(/ exh: exh) : bool =
  let deq : the_deque = @the(/exh)

  let elt : ml_int = wrap(999)
  do @the-push-tl(deq, elt/ exh)
  do @the-push-tl(deq, elt/ exh)
  do @the-push-tl(deq, elt/ exh)
  let elt2 : option = @the-pop-tl(deq/ exh)
  let elt2 : option = @the-pop-tl(deq/ exh)
  let elt2 : option = @the-pop-tl(deq/ exh)
  let elt2 : option = @the-pop-tl(deq/ exh)

  return(Equal(elt2, NONE))
;

define @test1(/ exh: exh) : bool =
  let deq : the_deque = @the(/exh)

  let elt0 : ml_int = wrap(999)
  do @the-push-tl(deq, elt0/ exh)
  let elt1 : ml_int = wrap(123)
  do @the-push-tl(deq, elt1/ exh)
  let elt2 : ml_int = wrap(1222)
  do @the-push-tl(deq, elt2/ exh)
  let elt3 : option = @the-pop-tl(deq/ exh)
  let elt3 : option = @the-pop-tl(deq/ exh)
  let elt3 : option = @the-pop-tl(deq/ exh)
  let elt3 : ml_int = VAL_OF(elt3, ml_int, exh)

  return(I32Eq(unwrap(elt0), unwrap(elt3)))
;

define @the-test-startup ( /exh : exh) : () =
  do @work-stealers-startup (/ exh)
  do_test(test1)
  do_test(test2)
  do_test(test-pop)
  do_test(test-pops)
  return ()
;
