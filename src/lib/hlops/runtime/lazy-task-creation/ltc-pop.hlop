(* ltc-pop.def
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Pop an element from the lazy task queue.
 *)

#include "ltc.def"
#include "types.def"
#include "runtime-offsets.def"
#include "debugging.def"
#include "assert.def"
#include "fgs.def"

define inline @ltc-pop(arg : unit / exh : exh) : bool =
 (* initialize the ltc scheduler and return its spawn function *)
  fun init (_ : unit / exh : exh) : any =
     (* scheduler should always be instantiated by now *)
      do assert(FALSE)
      @thread-exit(/exh)
  let fgs : fgs = @get-fgs (host_vproc / exh)
 (* obtain the spawn function *)
  let ltqFn : ltq_fun = @assoc-list-lookup (TAG_LTC, init, fgs / exh)
  let ltq : ir_dequeue = apply ltqFn (/exh)

 (* pop an element from the head of the lazy task queue while holding the lock *)
  let mask : bool = @spin-lock-ird (ltq / exh)

    let kOpt : option = @ird-pop-hd(ltq / exh)
    let isNonEmpty : bool = case kOpt
			     of NONE => return (FALSE)
			      | SOME(k : fiber) => return(TRUE)
                            end

  let _ : unit = @spin-unlock-ird (ltq, mask / exh)

  return(isNonEmpty)
;
