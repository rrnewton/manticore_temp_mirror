(* ltc-startup.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Scheduler for lazy task creation.
 *)

#include "ltc.def"
#include "types.def"
#include "runtime-offsets.def"
#include "debugging.def"
#include "assert.def"

extern void *ListVProcs (void *) __attribute__((alloc));

define @rand-int(lo : int, hi : int / exh : exh) : int =
  let lo : double = wrap(I32ToF64(lo))
  let hi : double = wrap(I32ToF64(hi))
  let r : ml_double = @drand (lo, hi / exh)
  let r : double = unwrap(r)
  let r : int = F64ToI32(r)
  return (r)
;

define @pick-random-elt (ls : list / exh : exh) : any =
  let len : ml_int = @list-length(ls /exh)
  let r : int = @rand-int(0, unwrap(len) / exh)
  let r : ml_int = wrap(r)
  let arg : [list, ml_int] = alloc(ls, r)
  let elt : any = @list-nth(arg / exh)
  return (elt)
;

define @ltc-startup ( / exh : exh) : ir_dequeue =

(*  let vps : list = ccall ListVProcs(host_vproc)

  fun f (_ :any / exh : exh) : ltq =
      let ltq : ir_dequeue = IR_DEQUEUE()
      let ltq : ir_dequeue = promote(ltq)
      return(ltq)
  let arg : [fun(any / exh -> any), list] = alloc(f, vps)
  let ltqs : list = @list-map(arg / exh)

  fun popSelf (ltq : ir_dequeue, none : cont(), some : cont(fiber) / exh : exh) : unit =
      @ird-pop-hd(ltq, none, some / exh)
  fun popOther (ltq : ir_dequeue, none : cont(), some : cont(fiber) / exh : exh) : unit = 
      @ird-pop-tl(ltq, none, some / exh)

  cont pop (popFn : fun (ir_dequeue, cont(), cont(fiber) / exh -> unit), ltq : ir_dequeue, none : cont(), some : cont(fiber)) =
       let mask : bool = @spin-lock-ird (ltq / exh)
        cont none' () =
             let _ : unit = @spin-unlock-ird (ltq, mask / exh)
             throw none()
        cont some'(k : fiber) = 
             let _ : unit = @spin-unlock-ird (ltq, mask / exh)
             throw some(k)
        let mask : bool = @spin-lock-ird (ltq / exh)
        apply popFn (ltq, none, some / exh)

  fun mkSwitch (self : vproc / exh : exh) : sigact =
      cont switch (s: signal) =
           cont dispatch (k : fiber) =
                @run(self, fgs, k / exh)
          (* try to steal a frame from one of the other vprocs *)
           cont steal () =
               (* pick the victim *)
                let victimLtq : any = @pick-random-elt(ltqs / exh)
                let victimLtq : ir_dequeue = (ir_dequeue)victimLtq
                throw pop(popOther, victimLtq, steal, dispatch)

           if Equal(s, STOP)
              then throw pop(popSelf, selfLtq, steal, dispatch)
              else let _ : unit = @atomic-yield(self / exh)
                   throw s(UNIT)
                 
 (* Initialize fiber-group storage. *)
  let parentFGS : fgs = @get-fgs (host_vproc / exh)
  let fgs : fgs = @new-fgs (TRUE, SOME (parentFGS) / exh)
 (* make the lazy task queue accessible to fibers *)
  fun init (_ : unit / exh : exh) : any = return (ltq)
  let _ : any = @assoc-list-lookup (TAG_LTC, init, fgs / exh)

  do @scheduler-startup (mkSwitch, fgs, vps / exh)
*)
  return (enum(0))
;

