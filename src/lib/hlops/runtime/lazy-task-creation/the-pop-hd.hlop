(* the-pop-hd.hlop
 *
 * COPYRIGHT (c) 2008 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Pop an element from the head of the deque.
 *  NOTE: the fetch-and-add instructions are not technically necessary, but to remove them
 *    we would need a read barrier after each of the updates to the tail pointer.  Since
 *    the fetch-and-add operation is the cheapest operation in our primops that can
 *    provide such a barrier, I use it of a potentially cheaper instruction.  
 *)

#include "debugging.def"
#include "the.def"

define @the-pop-hd(deq : the_deque / exh : exh) : option =

  cont none () = return(NONE)

  let mask : bool = @spin-lock-the (deq / exh)

  let h : int = I32FetchAndAdd(&THE_H_OFF(deq), 1)
  let h : int = I32Add(h, 1)
  let t : int = SELECT(THE_T_OFF, deq)

  let eltOpt : option = 
      if I32Gt(h, t)
         then (* contention with the victim; back off *)
              let h : int = I32FetchAndAdd(&THE_H_OFF(deq), -1)
              let h : int = I32Add(h, -1)
              return(NONE)
         else 
              let arr : array = SELECT(THE_ARR_OFF, deq)
              let frame : any = @array-sub-ub(arr, I32Sub(h, 1) / exh)
             (* IMPORTANT: a pointer to frame still exists in the array; erase it to avoid a space leak *)
              do @array-update-ub (arr, I32Sub(h, 1), enum(0) / exh)

              return(SOME(frame))

  let _ : unit = @spin-unlock-the (deq, mask / exh)

  return(eltOpt)
;
