(* ltc-push.def
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Push an element on the lazy-task queue.
 *)

#include "ltc.def"
#include "types.def"
#include "fgs.def"
#include "runtime-offsets.def"
#include "debugging.def"

define @ltc-push(f : ctx_fun / exh : exh) : unit =
  let fgs : fgs = @get-fgs (host_vproc / exh)
  let ltqFnOpt : option = @assoc-list-query(TAG_LTC, fgs / exh)
  let ltq : ir_dequeue = case ltqFnOpt
                          of NONE => 
			    (* allocate fgs for the lazy task creation workers *)
                             let fgs : fgs = @new-fgs(TRUE, SOME(fgs) / exh)
                             let _ : unit = @set-fgs(host_vproc, fgs / exh)
   		            (* initialize the ltc scheduler and return its spawn function *)
			     fun init (_ : unit / exh : exh) : any =
				 let ltqFn : ltq_fun = @ltc-scheduler (fgs / exh)
                                 return (ltqFn)
                            (* obtain the spawn function *)
                              let ltqFn : ltq_fun  = @assoc-list-lookup (TAG_LTC, init, fgs / exh)                            
                              let ltq : ir_dequeue = apply ltqFn (/exh)
                              return(ltq)
 			    | SOME(ltqFn : ltq_fun) =>
			      let ltq : ir_dequeue = apply ltqFn (/exh)
                              return(ltq)
                          end

  let elt : ir_dequeue_elt = IR_DEQUEUE_NEW(f)
  let elt : ir_dequeue_elt = promote(elt)

 (* push the context onto the lazy task queue head while holding the lock*)
  let mask : bool = @spin-lock-ird (ltq / exh)
    do @ird-push-hd(ltq, elt / exh)
  let _ : unit = @spin-unlock-ird (ltq, mask / exh)

  return (UNIT)
;
