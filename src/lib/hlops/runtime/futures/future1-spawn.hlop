(* future1-spawn.hlop
 * 
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Spawn a one-toucher future.
 *)

#include "types.def"
#include "futures.def"
#include "runtime-offsets.def"
#include "tags.def"
#include "fgs.def"
#include "logging.def"

define @future1-work-sharing ( / exh : exh) : future_spawn_fn;

define @future1-spawn (thunk : thunk / exh : exh) : future =
  (* initialize the futures scheduler and return its spawn function *)
  fun init (_ : unit / exh : exh) : any =
      let spawnFn : future_spawn_fn = @future1-work-sharing ( / exh)
      return (spawnFn)
  let fgs : fgs = @get-fgs (host_vproc / exh)
  (* obtain the spawn function *)
  let spawnFn : future_spawn_fn = @assoc-list-lookup (TAG_SPAWN_FUTURE, init, fgs / exh)
  (* allocate the future1 cell
     a future1 cell consists of two words:
       1) a _state_ word, with one of the following values:
            EMPTY_F
            STOLEN_F
            EVAL_F
            FULL      value
            WAITING   cont
       2) a _thunk_ word 
   *)
  let cell : future = alloc (EMPTY_F, thunk)
  let cell : future = promote (cell)
 (* add the future to the scheduling queue *)
  let _ : unit = apply spawnFn (cell / exh)

  do LOG_PTR(RTFuture1SpawnEvt, cell)

  return (cell) 
;
