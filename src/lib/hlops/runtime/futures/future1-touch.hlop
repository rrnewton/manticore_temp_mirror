(* future1-touch.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Touch a one-toucher future.
 *)

#include "types.def"
#include "futures.def"
#include "debugging.def"
#include "fgs.def"
#include "logging.def"

define @future1-touch (fut : future / exh : exh) : any =
  let tmp : any = CAS (&0(fut), EMPTY_F, EVAL_F)

  if Equal (tmp, EMPTY_F)
    then (* the future is ready for evaluation *)
         let result : any = @future1-eval(fut / exh)
         do LOG_PTR(RTFuture1TouchEvt, fut)
         do UPDATE(FUTURE1_STATE_OFF, fut, result)
         return (result)
    else if Equal (tmp, STOLEN_F)
           then (* someone else is evaluating the future; we need to block *)
                let fgs : fgs = @get-fgs(host_vproc /exh)
                cont kLocal (_ : unit) = 
                    (* reset the fgs *)
                     let _ : unit = @set-fgs(host_vproc, fgs / exh)
                    (* resume the future *)
		     return (SELECT(FUTURE1_STATE_OFF, fut))
                let kLocal : fiber = (fiber)kLocal
                (* make the future cancelable *)
                let kLocal : fiber = @cancelable-fiber(SELECT(FUTURE1_CANCEL_CELL_OFF, fut), kLocal / exh)
                let k : fiber = promote (kLocal)
   	        let tmpX : any = CAS (&0(fut), STOLEN_F, k)
 	        if Equal (tmpX, STOLEN_F)
	           then (* transfer control to the futures scheduler *)
                        @thread-exit (/ exh)
	          else (* the future value is ready *)
                       return (tmpX)
           else (* the future value is ready *)	       
                return (tmp)
;
