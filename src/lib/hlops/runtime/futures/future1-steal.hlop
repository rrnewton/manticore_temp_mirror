(* future1-steal.hlop
 * 
 * COPYRIGHT (c) 2008 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Stealing for one-toucher futures.
 *)

#include "types.def"
#include "locked-queue.def"
#include "futures.def"
#include "tags.def"
#include "debugging.def"
#include "logging.def"
#include "scheduling-ops.def"

define inline @future1-steal (futuresQ : locked_queue, fut : future / exh : exh) : () =
  let tmp : any = CAS (&0(fut), EMPTY_F, STOLEN_F)
  if Equal (tmp, EMPTY_F) 
     then let f : thunk = #1(fut)
          do #1(fut) := (thunk) $0
          let resultLocal : any = apply f (UNIT / exh)
          let result : any = promote (resultLocal)
          do LOG_PTR(RTFuture1StealEvt, fut)
          let tmpX : any = CAS(&0(fut), STOLEN_F, result)
          if Equal (tmpX, STOLEN_F)            
             then return ()
             else do #0(fut) := result
	          let k : fiber = (fiber) tmpX
                  do @locked-queue-enqueue (futuresQ, k / exh)
                  return ()
      else (* future cell is already full *)
           return ()
;
