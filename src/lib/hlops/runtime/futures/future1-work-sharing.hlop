(* future1-work-sharing.hlop
 * 
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Work sharing for one-toucher futures.
 *)

#include "types.def"
#include "futures.def"
#include "tags.def"
#include "debugging.def"
#include "fgs.def"
#include "logging.def"
#include "scheduling-ops.def"

define @future1-work-sharing ( / exh : exh) : locked_queue =

 (* shared queue for the workers *)
  let q : locked_queue = @locked-queue-new ( / exh)

 (* Initialize fiber-group storage. *)
  let parentFGS : fgs = @get-fgs (host_vproc / exh)
  let fgs : fgs = @new-fgs (TRUE, SOME (parentFGS) / exh)
 (* add the spawn function to the fiber group storage *)
  fun init (_ : unit / exh : exh) : any = return (q)
  let _ : any = @assoc-list-lookup (TAG_SPAWN_FUTURE1, init, fgs / exh)

 (* return the scheduler action *)
  fun mkSwitch (self : vproc / exh : exh) : sigact = 
      cont switch (s : signal) =
           cont dispatch () = 
                let kOpt : option = @locked-queue-dequeue (q / exh)
                case kOpt 
		 of NONE => 
		    let _ : unit = @atomic-yield (self / exh)
		    throw dispatch()
		  | SOME (k:fiber) =>
                    @run (self, switch, fgs, k / exh)
		end

           if Equal (s, STOP)
              then throw dispatch ()
              else do @locked-queue-enqueue (q, s / exh)
                   let _ : unit = @atomic-yield (self / exh)
                   throw dispatch ()
      return (switch)

 (* Initialize the scheduler on the vprocs. *)
  let vps : list = ccall ListVProcs(host_vproc)
  do @scheduler-startup (mkSwitch, fgs, vps / exh)

  return (q)
;
