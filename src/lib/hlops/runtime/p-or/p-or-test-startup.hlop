(*
 * Run me by saying
 *    mc -Cdebug=true -Cscheduler=future1-test triv.pml
 *) 

#include "types.def"
#include "p-or.def"
#include "testing.def"
#include "vproc-queue.def"
#include "runtime-offsets.def"
#include "scheduling-ops.def"

define @fib (n : int / exh : exh) : int =
  fun fib (n : int / ) : int =
      if I32Lte(n,1)
         then return(n)
         else let p : int = apply fib(I32Sub(n,1) /)
              let q : int = apply fib(I32Sub(n,2) /)
              return(I32Add(p,q))
  apply fib (n /)
;

(* both full *)
define @test4 (/ exh : exh) : bool =
  let y : ml_int = wrap(1024)
  fun f1 (_ : unit / exh : exh) : option =
      let x : int = @fib(38 / exh)
      return(SOME(y))
  fun f2 (_ : unit / exh : exh) : option =
      let x : int = @fib(38 / exh)
      return(SOME(y))
  let v : option = @p-or(f1, f2 / exh)
  let v : any = VAL_OF(v, ml_int, exh)
  return(Equal(v, y))
;

(* both empty *)
define @test3 (/ exh : exh) : bool =
  let y : ml_int = wrap(1024)
  fun f1 (_ : unit / exh : exh) : option =
      let x : int = @fib(38 / exh)
      return(NONE)
  fun f2 (_ : unit / exh : exh) : option =
      let x : int = @fib(38 / exh)
      return(NONE)
  let v : option = @p-or(f1, f2 / exh)
  return(Equal(v, NONE))
;

(* one empty *)
define @test2 (/ exh : exh) : bool =
  let y : ml_int = wrap(1024)
  fun f1 (_ : unit / exh : exh) : option =
      let x : int = @fib(38 / exh)
      return(SOME(y))
  fun f2 (_ : unit / exh : exh) : option =
      let x : int = @fib(44 / exh)
      return(NONE)
  let v : option = @p-or(f2, f1 / exh)
  let v : any = VAL_OF(v, ml_int, exh)
  return(Equal(v, y))
;

(* one empty *)
define @test1 (/ exh : exh) : bool =
  let y : ml_int = wrap(1024)
  fun f1 (_ : unit / exh : exh) : option =
      let x : int = @fib(38 / exh)
      return(SOME(y))
  fun f2 (_ : unit / exh : exh) : option =
      let x : int = @fib(44 / exh)
      return(NONE)
  let v : option = @p-or(f1, f2 / exh)
  let v : any = VAL_OF(v, ml_int, exh)
  return(Equal(v, y))
;

define @p-or-test-startup ( /exh : exh) : () =
  do @default-scheduler-startup (/exh)

  do_concurrent_test(test1, 5.0:double)
  do_concurrent_test(test2, 5.0:double) 
  do_concurrent_test(test3, 5.0:double)
(*  do_concurrent_test(test4, 5.0:double)*)

  return ()
;
