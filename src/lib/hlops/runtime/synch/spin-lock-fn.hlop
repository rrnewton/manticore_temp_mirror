(* spin-lock-fn.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Generic spin locks that are parameterized over a name, a container type and an offset that gives
 * the location of the lock.
 *)

#ifndef _SPIN_LOCK_FN_
#define _SPIN_LOCK_FN_

#include "types.def"
#include "runtime-offsets.def"

#define define_spin_lock(sl_name, sl_ty, sl_offset)                                                     \
define inline @spin-lock-sl_name (lock : sl_ty / exh : exh) : bool =                                    \
    fun spin (_ : unit / exh : exh) : bool =                                                            \
	if BCAS(&sl_offset(lock),FALSE,TRUE)                                                            \
           then let mask : bool = vpload (ATOMIC, host_vproc)                                           \
                do vpstore(ATOMIC, host_vproc, TRUE)                                                    \
                return (mask)                                                                           \
           else apply spin (UNIT / exh)                                                                 \
      apply spin (UNIT / exh)                                                                           \
;                                                                                                       \
                                                                                                        \
define inline @spin-unlock-sl_name (lock : sl_ty, mask : bool / exh : exh) : unit =                     \
    do UPDATE(sl_offset,lock,FALSE)                                                                     \
    do vpstore(ATOMIC, host_vproc, mask)                                                                \
    return (UNIT)                                                                                       \
;                                                                                                       \
                                                                                                        \
(* apply a function while holding a lock *)                                                             \
define inline @with-lock-sl_name (lock : sl_ty, f : fun (unit / exh -> unit) / exh : exh) : unit =      \
    let mask : bool = @spin-lock-sl_name (lock / exh)                                                   \
    let _ : unit = apply f (UNIT / exh)                                                                 \
    let _ : unit = @spin-unlock-sl_name (lock, mask / exh)                                              \
    return (UNIT)                                                                                       \
;

#endif /*! _SPIN_LOCK_FN_ */
