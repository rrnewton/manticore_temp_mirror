/* asm-glue.S
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Manticore runtime conventions on the AMD64:
 *
 *	%rax	-- standard arg
 *	%rdi	-- standard ep
 *	%rsi	-- standard return continuation
 *	%r9	-- standard exception handler
 *	%rdx	-- allocation pointer
 *	%r11	-- limit pointer
 */

#include "asm-defs.h"
#include "asm-offsets.h"

/* Stack frame layout */
#define RBX_OFF		(-2*8)	/* offset off %rbp for saving %rbx */
#define R12_OFF		(-3*8)	/* offset off %rbp for saving %r12 */
#define R13_OFF		(-4*8)	/* offset off %rbp for saving %r13 */
#define R14_OFF		(-5*8)	/* offset off %rbp for saving %r14 */
#define R15_OFF		(-6*8)	/* offset off %rbp for saving %r15 */


/* ASM_Apply:
 *
 *	ReturnCode_t ASM_Apply (
 *	    VProc_t *vp,	-- host vproc; in %rdi
 *	    Addr_t cp,		-- code address of function; in %rsi
 *	    Value_t arg,	-- function argument; in %rdx
 *	    Value_t ep,		-- function environment ptr.; in %rcx
 *	    Value_t rk,		-- function return continuation; in %r8
 *	    Value_t ek)		-- function exception continuation; in %r9
 */
	.text
	.p2align 3
	.globl	_GSYM(ASM_Apply)
_GSYM(ASM_Apply):
	pushq	%rbp			/* save frame pointer */
	movq	%rsp,%rbp		/* set new frame pointer */
	leaq	-FRAME_SZB(%rsp),%rsp	/* allocate the stack frame */
      /* save C callee-save registers */
	movq	%rbx,RBX_OFF(%rbp)
	movq	%r12,R12_OFF(%rbp)
	movq	%r13,R13_OFF(%rbp)
	movq	%r14,R14_OFF(%rbp)
	movq	%r15,R15_OFF(%rbp)
      /* setup standard arguments to the Manticore function */
	movq	%rdi,%r10		/* save vproc pointer in %r10 */
	movq	%rsi,%r12		/* save code pointer in %r12 */
	movq	%rdx,%rax		/* standard argument */
	movq	%rcx,%rdi		/* environment pointer */
	movq	%r8,%rsi		/* return continuation */
	movq	%r9,%r9		/* exception continuation */
      /* load Manticore state */
	movq	ALLOC_PTR(%r10),%rdx	/* load allocation pointer */
	movq	LIMIT_PTR(%r10),%r11	/* limit pointer */
	movq	$M_TRUE,IN_MANTICORE(%r10) /* we are running manticore code now! */
	jmp	*%r12

/* code address for uncaught exception continuation */
	.p2align 3
	.globl	_GSYM(ASM_UncaughtExn)
_GSYM(ASM_UncaughtExn):
	movq	$REQ_UncaughtExn, %r9
	jmp	switch_to_c

/* code address for return continuation */
	.p2align 3
	.globl	_GSYM(ASM_Return)
_GSYM(ASM_Return):
	movq	$REQ_Return, %r9
	jmp	switch_to_c

/* code address for putting the host vproc to sleep */
	.p2align 3
	.globl	_GSYM(ASM_VProcSleep)
_GSYM(ASM_VProcSleep):
	movq	$REQ_Sleep, %r9
	jmp	switch_to_c

	.p2align 3
	.globl	_GSYM(ASM_InvokeGC)
_GSYM(ASM_InvokeGC):
	movq	$REQ_GC, %r9

switch_to_c:
	/* the sequential GC does not store the VProc at the base of its heap */
#ifdef SEQUENTIAL_RT
	call	VProcSelf
	movq	%rax,%r10
#else
      /* compute the vproc pointer from the allocation pointer */
	movq	%rdx,%r10
	andq	$VP_MASK,%r10
#endif
      /* mark that we are not running Manticore code anymore */
	movq	$M_FALSE,IN_MANTICORE(%r10)
      /* save Manticore state */
	movq	%rax,STD_ARG(%r10)
	movq	%rdi,STD_EP(%r10)
	movq	%rsi,STD_CONT(%r10)
	movq	%r9,STD_EXH(%r10)
	movq	%rdx,ALLOC_PTR(%r10)
      /* restore C callee-save registers */
	movq	RBX_OFF(%rbp),%rbx
	movq	R12_OFF(%rbp),%r12
	movq	R13_OFF(%rbp),%r13
	movq	R14_OFF(%rbp),%r14
	movq	R15_OFF(%rbp),%r15
      /* return request code */
	movq	%r9,%rax
	leave
	ret

