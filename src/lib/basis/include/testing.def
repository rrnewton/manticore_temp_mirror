(* testing.def
 *
 * COPYRIGHT (c) 2008 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Utilities for stress testing runtime code.
 *)

#ifndef _TESTING_DEF_
#define _TESTING_DEF_

#include "assert.def"
#include "debug.def"

#ifdef NDEBUG
#define do_test(test)
#define do_concurrent_test(hlop, time)
#else

#define _QUOTE(x) #x
#define QUOTE(x) _QUOTE(x)

(* test a sequential program *)
#define do_test(test)			                                            \
	let b : PrimTypes.bool = @test(/exh)	                                            \
        do if Equal(b,FALSE)                                                        \
              then do ccall M_PrintTestingMsg ("Answer", QUOTE(PML_FILE), __LINE__)        \
                   return ()                                                        \
              else return ()                                                        \
	do assert(Equal(b,TRUE))                                                    \

(* test a concurrent program, waiting wait_secs until declaring deadlock *)
#define do_concurrent_test(hlop, wait_secs)                                      \
        fun f (_ : PrimTypes.unit / exh : PT.exh) : PrimTypes.bool =                                    \
              @hlop (/exh)                                                       \
        do @check-for-deadlock (f, wait_secs / exh)     \

#define ASSERT_NONEMPTY_ACTION_STK(vp)                          \
    let tos : [PT.sched_act, any] = vpload(VP_ACTION_STK, vp)   \
    assert(NotEqual(tos, nil))

#define ASSERT_SIGNALS_MASKED(vp)                 \
    let mask : bool = vpload(ATOMIC, host_vproc)  \
    assert(mask)

#endif

#endif /*! _TESTING_DEF_ */
