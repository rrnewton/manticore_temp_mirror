(* spin-lock.def
 *
 * COPYRIGHT (c) 2015 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Spin lock operations using a "test and test-and-set" implementation.
 *
 * The lock variable can be part of an arbitrary type, e.g., suppose
 * we have a type t that contains a spin lock.
 *
 *   type spin_lock = int;
 *   type ty = ![ty1, spin_lock, ...]';
 * 
 * We can then obtain a lock as follows:
 *
 *   let x : ty = ...
 *   SPIN_LOCK(x, 1)
 *   ...
 *   SPIN_UNLOCK(x, 1)
 *)

#ifndef _SPIN_LOCK_DEF_
#define _SPIN_LOCK_DEF_

#define SPIN_LOCK(name, OFFSET)												\
	fun spinLp (i : long) : () =											\
		fun doBackoff (i : long) : () =										\
			if I64Gt(i, 0 : long) then										\
				do Pause()													\
				apply doBackoff (I64Sub(i, 1 : long))						\
			else															\
				return ()													\
																			\
	 if I32isSet(ADDR_OF(OFFSET, name))										\
		   then																\
		do Pause()															\
		apply spinLp (i)													\
		  else if I32TAS(ADDR_OF(OFFSET, name))								\
		then																\
		  	do apply doBackoff (i)											\
			apply spinLp (I64Add(i, i))										\
		else return ()														\
	do apply spinLp (1 : long)

#define SPIN_UNLOCK(name, OFFSET)											\
	do UPDATE(OFFSET, name, 0)

#endif /*! _SPIN_LOCK_DEF_ */

