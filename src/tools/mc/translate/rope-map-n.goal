(* rope-map-n.goal
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * This is a sketch of the hlop that RopeMapMaker is intended to produce.
 *)

fun list_to_tup[n] ...

fun rope_map_[n] (f : fun [any,...,any/exh->any], r1 : rope, ..., r[n] : rope / exh : exh) 
                 : rope =

  (* build a list of all ropes *)
  let ropes : list = CONS (r1, ... (CONS (rn, NIL) ... )

  (* calculate
   * - i, the index of the shortest rope in "ropes",
   * - s, the shortest rope in "ropes", and
   * - others, the list of all ropes except "s" in their original order *)
  let x : [rope, list, int] = @extract-shortest-rope (ropes / exh)  
  let s : rope      = #0(x)
  let others : list = #1(x)
  let i : int       = #2(x)

  (* We'll borrow the structure of the shortest rope in mapping over all ropes. *)
  fun rmap[n] (short : rope, start : int / ) : rope =
    case short
      of LEAF(ml_len:ml_int, data:list) =>
           let len : int = unwrap(ml_len)
           let get : fun (rope / exh -> [list, bool]) = 
             @curried-rope-sublist (start, len / exh)
           let arg : [fun (any / exh -> any), list] = alloc (get, others)
           let sublists : list = @list-map (arg / exh)
           let others_ : list = apply mapHash1 (sublists)
           let all : list = @insert-at (data, othersX, i / exh)
           let ds : [any, ..., any] = apply list-to-tup[n] (all) 
           let d1 : list = #0(ds)
           ...
           let dn : list = #[n-1](ds)
           let data_ : list = apply list-map-[n] (f, d1, ..., d[n])
           let e : rope = LEAF (ml_len, dataX)
           return (e)
       | CAT (ml_len:ml_int, d:ml_int, shortL:rope, shortR:rope) =>
           let lenL : int = @rope-length-int (shortL / exh)
           let startR : int = I32Add (start, lenL)
           fun thunk (u : unit / exh : exh) : rope = apply rmap[n] (shortR, startR)
           let shortRX_F : future = @future1-spawn (thunk / exh)  
           let shortLX : rope = apply rmap[n] (shortL, start)
           let shortRX : rope = @future1-touch (shortRX_F / exh)
           let c : rope = CAT (ml_len, d, shortLX, shortRX)
           return (c)
    end (* case *)
  (* end fun rmap[n] *)

  apply rmap[n] (s, 0)
;
