(* mutual-recursion.bom *)

module MutualRec
  fun init (arg : any; exh : cont(any)) : unit =

    fun outer (a : (int, int); exh : cont(any)) : int =
	let i : int = #0(a)
	let n : int = #1(a)

	fun f (j : int; exh : cont(any)) : int =
	    let x : int = I32Add (i, j)
            apply g (x; exh)

	and g (j : int; exh : cont(any)) : int =
	    if I32Gte (j, n)
	    then return (j)
	    else apply f (j; exh)

	apply f (0 : int; exh)


    fun doit (i : int; exh : cont(any)) : int =
	let a : (int, int) = alloc (1 : int, i)
	apply outer (a; exh)

    return (enum(0))
