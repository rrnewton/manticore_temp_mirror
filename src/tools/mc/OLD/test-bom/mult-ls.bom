(* mult-ls.bom
 * Multiply a list of integers, short circuiting the operation upon encountering
 * a zero element *)

module MultLs
  fun init (arg : any; mk : cont(any), exh : cont(any)) : unit =

    fun multLs (l : list; exh : cont(any)) : int =
      case l
       of  enum(0) => return (1: int)
        |  CONS(i : int, tl : list) =>
             if I32Eq (i, 0 : int) then return (0 : int)
	     else let l' : int = apply multLs (tl; exh)
	          return (I32Mul(i, l'))
      end	

      (* returns the list [i,..,1] *)
    fun tabulate (i : int; exh : cont(any)) : list =
        if I32Lte (i, 0:int) then return (enum(0))
	else let tl : list = apply tabulate  (I32Sub (i, 1: int); exh)
	     return (CONS(i, tl))

    fun doit (i : int; exh : cont(any)) : int =
	let l : list = apply tabulate (i; exh)
	let ls : int = apply multLs (l; exh)
	return (ls)

    return (enum(0))
