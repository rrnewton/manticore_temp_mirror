(* build-executable.sml
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * @configure_input@
 *
 * A wrapper for the commands needed to assemble and link the output
 * of the Manticore compiler.
 *)

structure BuildExecutable : sig

    val build : {
	    verbose : bool,	(* if true, print shell commands to stdout *)
	    asmFile : string,	(* the assembly file generated by the compiler *)
	    outFile : string	(* the name of the executable image. *)
	  } -> OS.Process.status

  end = struct

    val cat = String.concatWith " "

    fun ++ ("", l) = l
      | ++ (opt, l) = opt::l

    infixr ++

    val isCrossCompiler = (@CROSS_COMPILING@ = 1)

    val ccCmd =  "@CC@"

    val cFlags = cat ("@CFLAGS@" ++ "@CFLAG_M64@" ++ [])

    fun ldFlags libName = let
	  val libDirs = List.filter (fn path => OS.FileSys.access (path, [])) [
		  "@prefix@/lib",
		  "@MANTICORE_LIBDIR@",
		  "@MANTICORE_SRCDIR@/lib/parallel-rt/build/" ^ libName
		]
	  val libDirs = List.map (fn path => "-L" ^ path) libDirs
	  val rtLib = "-l" ^ libName
	  in
	    cat (libDirs @ ("@LDFLAGS@" ++ rtLib ++ "@LIBS@" ++ "-lpthread" ++ []))
	  end

    fun cmd asmFile = let
	  val gcStats = Controls.get BasicControl.gcStats
	  val logging = Controls.get BasicControl.logging
	  val debug = Controls.get BasicControl.debug
	  val perf = Controls.get BasicControl.perf
	  val (cFlags, libName) = (case (gcStats, logging, debug, perf)
		 of (true, false, false, false) => (cFlags, "mcrt-stats")
		  | (_, false, false, false) => (cFlags, "mcrt")
		  | (_, true, false, false) => (cFlags, "mcrt-log")
		  | (_, false, true, false) => ("-g "^cFlags, "mcrt-debug")
		  | (_, true, true, false) => ("-g "^cFlags, "mcrt-log-debug")
		  | (_, _, _, true) => (cFlags, "mcrt-perf")
		(* end case *))
	  in
	    cat [ccCmd, cFlags, asmFile, ldFlags libName]
	  end

    fun build {verbose, asmFile, outFile} = if isCrossCompiler
	  then (
	    TextIO.output(TextIO.stdErr, "cross compiler cannot produce executables\n");
	    OS.Process.failure)
	  else let
	    val cmd' = cat[cmd asmFile, " -o ", outFile]
	    in
	      if verbose
		then TextIO.print(cmd' ^ "\n")
		else ();
	      OS.Process.system cmd'
	    end

  end
