(* load-paths.sml
 *
 * COPYRIGHT (c) 2008 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * @configure_input@
 *)

structure LoadPaths =
  struct

  (* Manticore basis library *)
    val basisDir = "@MANTICORE_BASISDIR@"

  (* Manticore basis CPP definition directory *)
    val basisCPPDefDir = OS.Path.joinDirFile {file="include", dir=basisDir}

  (* Manticore basis CPP definition directory *)
    val basisSequentialDir = OS.Path.joinDirFile {file="sequential", dir=basisDir}

  (* sequential basis library *)
    val sequentialLib = OS.Path.joinDirFile{file="sequential.mlb", dir=basisSequentialDir}

  (* top-level schedulers *)
    val topLevelSchedsDir = OS.Path.joinDirFile{file="schedulers", dir=basisDir}

  (* top-level scheduler library *)
    fun topLevelSchedLib topLevelSched = OS.Path.joinDirFile{file=topLevelSched^".mlb", dir=topLevelSchedsDir}

  (* default thread scheduler library *)
    val defImplicitThreadSchedLib = OS.Path.joinDirFile{file="def-implicit-thread-sched.mlb", dir=topLevelSchedsDir}

  (* implicit threading *)
    val implicitThreadingDir = OS.Path.joinDirFile{file="implicit-threading", dir=basisDir}

  (* implicit-threading library *)
    val implicitThreadingLib = OS.Path.joinDirFile{file="implicit-threading.mlb", dir=implicitThreadingDir}

  (* CML *)
    val cmlDir = OS.Path.joinDirFile{file="cml", dir=basisDir}

  (* CML library *)
    val cmlLib = OS.Path.joinDirFile{file="cml.mlb", dir=cmlDir}

  end
