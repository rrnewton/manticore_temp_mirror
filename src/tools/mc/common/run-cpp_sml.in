(* run-cpp.sml
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * @configure_input@
 *)

structure RunCPP : sig

    val cppCmd : string

  (* make a predefined name *)
    val mkDef : (string * string option) -> string

  (* build the argument list *)
    val mkArgs : {
	     relativeTo : string,                     (* directory where the CPP will run *)
	     includes : string list,                  (* includes can be files or directories *)
	     predefs : string list,                   (* predef variables (set with -D) *)
	     file : string option                     (* file to give the CPP (NONE for stdin) *)
           } -> string list

    val run : {
	    noLines : bool,	(* if true, then supress #line directives *)
	    defs : (string * string option) list,
	    includes : string list,
	    input : string
	  } -> {inStrm : TextIO.instream, reap : unit -> unit}

  (* Parse a line that contains a C pre-processor line marker.  This code
   * expects the line marker to either be in ANSI format
   *
   *	# line <n> <filename>
   *
   * or GNU format
   *
   *	# <n> <filename> <flags>
   *)
    val parseLineDirective : string -> {
	    fileName : string option,
	    lineNo : int
	  } option

  end = struct

    val cppCmd = "@CPP@"

    fun mkDef (symb, NONE) = "-D" ^ symb
      | mkDef (symb, SOME s) = String.concat["-D", symb, "=\"", s, "\""]

    fun mkIncludeDir dir = "-I" ^ dir
    fun mkIncludeFile file = "-include" ^ file

    fun run {noLines, defs, includes, input} = let
	  val args = (List.map mkDef defs)
		@ (List.map mkIncludeDir includes)
		@ [input]
	  val args = if noLines then "-P" :: args else args
	  val proc = Unix.execute(cppCmd, args)
	  in
	    { inStrm = Unix.textInstreamOf proc,
	      reap = fn () => ignore(Unix.reap proc)
	    }
	  end

    fun fileExists f = OS.FileSys.access (f, [OS.FileSys.A_READ])

    fun mkArgs {relativeTo, includes, predefs, file} = let
	val relativeTo = OS.FileSys.fullPath relativeTo
	(* given a file and a relative path, return the full path of the file, i.e.,
	 *   file=foo.def path=/home/bar/             =>      /home/bar/foo.def
	 *)
	  fun mkPath path = OS.Path.mkAbsolute{path=path, relativeTo=relativeTo}
	  (* paths to included files and directories *)
	  val includePaths = List.filter fileExists (List.map mkPath includes)
	  (* split the includes by whether they are files or directories *) 
	  val (includeDirs, includeFiles) = List.partition OS.FileSys.isDir includePaths
	  in
		(* strip away preprocessor directives and cruft *)
		"-P" ::
		predefs @
		(* include directories *)
		List.map mkIncludeDir includeDirs @
		(* include files *)
		List.map mkIncludeFile includeFiles @
		(case file
		  of NONE =>
		     (* pass the file to cpp through stdin *)
		     ["-"]
		   | SOME file => 
		     [file]
		(* end case *))
	  end

    structure SS = Substring

    val skipWS = StringCvt.skipWS SS.getc

  (* scan a file name *)
(* FIXME: eventually, we should deal with escape characters! *)
    fun scanFileName ss = let
	  fun isSChar #"\"" = false | isSChar _ = true
	  in
	    case SS.getc ss
	     of SOME(#"\"", ss) => let
		  val (filename, ss) = SS.splitl isSChar ss
		  in
		    case SS.getc ss
		     of SOME(#"\"", ss) => SOME(SS.string filename, ss)
		      | _ => NONE
		    (* end case *)
		  end
	      | _ => NONE
	    (* end case *)
	  end

    (* scan a decimal number *)
    val scanNum = Int.scan StringCvt.DEC SS.getc

    fun parseLineDirective ln = let
	  val ln = SS.triml 1 (SS.full ln)	(* trim leading # *)
	  val ln = skipWS ln
	  in
	    if SS.isPrefix "line" ln
	      then NONE (* FIXME: handle ANSI format *)
	      else let (* handle GNU format *)
		val SOME(n, ln) = scanNum ln
		val ln = skipWS ln
		in
		  case scanFileName ln
		   of SOME(file, _) => SOME{fileName=SOME file, lineNo=n}
		    | NONE => SOME{fileName=NONE, lineNo=n}
		  (* end case *)
		end
	  end
	    handle _ => NONE

  end
