(* Test calling conventions.
 * 
 * Run me by saying
 *    mc -Cdebug=true -Cscheduler=test-calling-conventions triv.pml
 *) 

#include "types.def"
#include "testing.def"
#include "vproc-queue.def"
#include "runtime-offsets.def"
#include "scheduling-ops.def"
#include "array.def"

define @testf32 (/ exh : exh) : bool =
  let len : ml_int = wrap(1024)
  let init : ml_int = wrap(0)
  let arg : [ml_int, any] = alloc(len, init)
  let arr : array = @array(arg / exh)
  let _ : bool  = ArrayStoreF32(arr, 45, 9.999)
  let _ : bool  = ArrayStoreF32(arr, 44, 3.999)
  let _ : bool  = ArrayStoreF32(arr, 46, 4.999)
  return(F32Eq(ArrayLoadF32(arr, 45), 9.999))
;

define @testf64 (/ exh : exh) : bool =
  let len : ml_int = wrap(1024)
  let init : ml_int = wrap(0)
  let arg : [ml_int, any] = alloc(len, init)
  let arr : array = @array(arg / exh)
  let _ : bool  = ArrayStoreF64(arr, 45, 9.9992:double)
  let _ : bool  = ArrayStoreF64(arr, 44, 3.999:double)
  let _ : bool  = ArrayStoreF64(arr, 46, 4.999:double)
  return(F64Eq(ArrayLoadF64(arr, 45), 9.9992:double))
;

define @testi32 (/ exh : exh) : bool =
  let len : ml_int = wrap(1024)
  let init : ml_int = wrap(0)
  let arg : [ml_int, any] = alloc(len, init)
  let arr : array = @array(arg / exh)
  let _ : bool  = ArrayStoreI32(arr, 45, 9999)
  return(I32Eq(ArrayLoadI32(arr, 45), 9999))
;

define @testi64 (/ exh : exh) : bool =
  let len : ml_int = wrap(1024)
  let init : ml_int = wrap(0)
  let arg : [ml_int, any] = alloc(len, init)
  let arr : array = @array(arg / exh)
  let n : long = 99998:long
  let _ : bool  = ArrayStoreI64(arr, 45, n)
  return(I64Eq(ArrayLoadI64(arr, 45), n))
;

define @test-array-startup ( /exh : exh) : () =
  do @default-scheduler-startup (/exh)

  do_test(testi64)
  do_test(testi32)
  do_test(testf64)
  do_test(testf32)

  return ()
;
