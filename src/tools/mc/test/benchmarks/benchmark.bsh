#!/bin/bash

GOTO_SEQ_SIZES=""

usage="usage: benchmark.bsh -e prog_name -q sequential_prog_name -s size ... -p num_procs ... -l seq_sz ..."
SEQ_PROG_NAME=""
while getopts ":s:p:e:q:l:" options; do
  case $options in
    s ) SIZES="$SIZES $OPTARG";;
    p ) PROCS="$PROCS $OPTARG";;
    e ) PROG_NAME="$OPTARG";;
    l ) GOTO_SEQ_SIZES="$GOTO_SEQ_SIZES $OPTARG";;
    q ) SEQ_PROG_NAME="$OPTARG";;
    h ) echo $usage;;
    \? ) echo $usage
         exit 1;;
    * ) echo $usage
          exit 1;;

  esac
done

PROG_EXE=$PROG_NAME-run

MC="sml @SMLcmdname=mc @SMLload=../../mc"
MCFLAGS="-Cclos.convert-style=flatWithCFA"
SEQFLAGS="$MCFLAGS -Csequential=true"

DATE=$( date +"%F-%H-%M-%S" )
LOG_FILE_NAME=$PROG_NAME-$DATE.times
echo "Logging performance results to $LOG_FILE_NAME"

# compile the sequential version
if [ -z $SEQ_PROG_NAME ] ; then
    SEQ_PROG_NAME=$PROG_NAME
fi

SEQ_PROG_EXE=$PROG_NAME-seq
m4 $PROG_NAME/$SEQ_PROG_NAME.pml > $SEQ_PROG_NAME.pml
$MC $SEQFLAGS $SEQ_PROG_NAME.pml 2> /dev/null
mv a.out $SEQ_PROG_EXE

ARCH=$( uname -m )
OS=$( uname -s )
MACHINE=$( uname -n )
SVN_REVISION=$( svn info | grep Revision )

echo -e "#ARCH:\t$ARCH OS:\t$OS MACHINE:\t$MACHINE" >> $LOG_FILE_NAME
echo -e "#MCFLAGS\t$MCFLAGS" >> $LOG_FILE_NAME
echo -e "#SVN $SVN_REVISION" >> $LOG_FILE_NAME
echo -e "#nProcs\t\tsize\t\tmaxLeafSize\ttime(s)" >> $LOG_FILE_NAME 

PARFLAGS="$MCFLAGS"
#run the macro expander on the source program
m4 $PROG_NAME/$PROG_NAME.pml > $PROG_NAME.pml
#compile the parallel version
$MC $PARFLAGS $PROG_NAME.pml 2> /dev/null
mv a.out $PROG_EXE

for seq_sz in $GOTO_SEQ_SIZES
do
    for p in $PROCS
    do   
        for s in $SIZES
	do
	    echo "evaluating $PROG_NAME for $p processor[s] at image size $s and sequential size $seq_sz"
	    echo -n -e "$p\t\t$s\t\t$seq_sz\t\t" >> $LOG_FILE_NAME
	    if [ "$p" -eq "0" ] ; then       
		echo "$seq_sz $s." | ./$SEQ_PROG_EXE >> $LOG_FILE_NAME
	    else
		echo "$seq_sz $s." | ./$PROG_EXE -p $p >> $LOG_FILE_NAME
	    fi
	done
    done
done

rm -f *.ppm *.s $PROG_EXE $SEQ_PROG_EXE $SEQ_PROG_NAME.pml $PROG_NAME.pml
