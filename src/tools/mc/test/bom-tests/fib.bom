(* fib.bom *)

module Fib
  fun init (i : int / exh : cont(any)) : int =

    fun fib (i : int / exh : cont(any)) : int =
	if I32Lte(i, 0:int) then return (0:int)
	else if I32Eq(i, 1:int) then return (1:int)
	  else
	    let a : int = apply fib (I32Sub (i, 2: int) / exh)
	    let b : int = apply fib (I32Sub (i, 1: int) / exh)
	    return (I32Add(a, b))

      fun wasteTime (/ exh : cont(any)) : () =
	  fun doit (i : int / exh : cont(any)) : () =
	      if I32Eq (i, 0) then return () else
  	      let x : int = apply fib (7 / exh)
              apply doit (I32Sub(i, 1)/ exh)
          apply doit (1000000 / exh)

    do @default-scheduler-startup ( / exh)
    do apply wasteTime ( / exh)
    do apply wasteTime ( / exh)
    do apply wasteTime ( / exh)
    do apply wasteTime ( / exh)
    do apply wasteTime ( / exh)
    return (0)
