module Host

  extern void M_PrintPtr (void *, void *);
  extern void M_Print (void *);
  extern void *OtherVProc (void *);

  fun doit (i : int / exh : cont(any)) : int =

    do @default-scheduler-startup (/ exh)

   cont k0 (x : enum(0)) =
      let self : vproc = host_vproc      

      let x : list = enum(0):list

      do ccall M_PrintPtr ("self", self)
      cont k1 (x : enum(0)) = 
        let ls : list = enum (0)
        cont k2 (x : list) =
          case x
             of CONS (y : any, xs : list) => @thread-exit ( / exh) 
	      | enum(0) =>
                cont k2 () = 
                   do ccall M_PrintPtr ("self2", self)
                   @thread-exit ( / exh) 
                 throw k2 ()
              end
         if I32Eq (i, 1)
            then throw k2 (enum(0):list)
            else throw k2 (enum(1):list)

    fun fib (i : int / exh : cont(any)) : int =
	if I32Lte(i, 0:int) then return (0:int)
	else if I32Eq(i, 1:int) then return (1:int)
	  else
	    let a : int = apply fib (I32Sub (i, 2: int) / exh)
	    let b : int = apply fib (I32Sub (i, 1: int) / exh)
	    return (I32Add(a, b))

      fun wasteTime (/ exh : cont(any)) : () =
	  fun doit (i : int / exh : cont(any)) : () =
	      if I32Eq (i, 0) then return () else
  	      let x : int = apply fib (7 / exh)
              apply doit (I32Sub(i, 1)/ exh)
          apply doit (1000000 / exh)

     do apply wasteTime (/ exh)

     let vp : vproc = ccall OtherVProc (host_vproc)
     do @enqueue-on-vproc (vp, enum(0), k1 / exh)

     do apply wasteTime (/ exh)

     @thread-exit ( / exh)

  throw k0 (enum(0) : enum(0))
