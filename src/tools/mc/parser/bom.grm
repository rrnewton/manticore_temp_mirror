(* hlop-def.grm
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * TODO:
 *	add datatype definitions
 *	rewrite rules
 *)

%name HLOpDef;

%tokens
	: KW_addr	("addr")
	| KW_alloc	("alloc")
(*	| KW_and	("and")			*)
	| KW_any	("any")
	| KW_apply	("apply")
	| KW_hlop	("hlop")
	| KW___attribute__ ("__attribute__")
	| KW_byte	("byte")
(*	| KW_case	("case")		*)
	| KW_ccall	("ccall")
	| KW_cont	("cont")
(*	| KW_datatype	("datatype")		*)
	| KW_define	("define")
	| KW_do		("do")   
	| KW_double	("double")
(*	| KW_else	("else")		*)
(*	| KW_end	("end")			*)
	| KW_enum	("enum")
	| KW_extern	("extern")
	| KW_float	("float")
(*	| KW_fun	("fun")			*)
	| KW_host_vproc ("host_vproc")
(*	| KW_if		("if")			*)
	| KW_inline	("inline")
	| KW_int	("int")
(*	| KW_let	("let")			*)
	| KW_long	("long")
	| KW_module	("module")
	| KW_noreturn	("noreturn")
(*	| KW_of		("of")			*)
	| KW_promote	("promote")
	| KW_pure	("pure")
        | KW_return	("return")
	| KW_short	("short")
	| KW_tag        ("tag")
(*	| KW_then	("then")		*)
	| KW_throw	("throw")
	| KW_typedef	("typedef")
	| KW_unwrap	("unwrap")
        | KW_use_rw     ("use_rw")
	| KW_vec128	("vec128")
	| KW_void	("void")
	| KW_vproc	("vproc")
	| KW_vpload	("vpload")
	| KW_vpstore	("vpstore")
	| KW_wrap	("wrap")
	| KW_pmlvar	("pmlvar")
(*	| LP		("(")			*)
(*	| RP		(")")			*)
(*	| LB		("[")			*)
(*	| RB		("]")			*)
	| HASH		("#")
(*	| STAR		("*")			*)
(*	| COMMA		(",")			*)
(*	| EQ		("=")			*)
(*	| COLON		(":")			*)
(*	| SLASH		("/")			*)
(*	| SEMI		(";")			*)
(*	| BAR		("|")			*)
(*	| WILD		("_")			*)
(*	| BANG		("!")			*)
(*	| AMP		("&")			*)
	| DS		("$")
	| ASSIGN	(":=")
(*	| DARROW	("=>")			*)
(*	| ARROW		("->")			*)
(*	| ID of Atom.atom			*)
	| HLOP of Atom.atom list
(*	| POSINT of IntInf.int		(* positive integer *) *)
(*	| NEGINT of IntInf.int		(* negative integer *) *)
(*	| FLOAT of FloatLit.float		*)
(*	| STRING of string			*)
	| ML_STRING of string
	;

%defs(
    structure BPT = ProgramParseTree.PML1.BOMParseTree
    structure CF = CFunctions

    fun flatten NONE = []
      | flatten (SOME(x, xs)) = x::xs

  (* default types for literals *)
    val dfltIntTy = BPT.T_Raw(BPT.T_Int)
    val dfltFloatTy = BPT.T_Raw(BPT.T_Float)
    val dfltStringTy = BPT.T_Any (* FIXME *)

(* apply a mark constructor to a span and a tree *)
  fun markBOM cons (span : AntlrStreamPos.span, tr) = cons{span = span, tree = tr}

  val markBOMDefn = markBOM BPT.D_Mark
  val markBOMTy = markBOM BPT.T_Mark
  val markBOMExp = markBOM BPT.E_Mark
  val markBOMRHS = markBOM BPT.RHS_Mark
  val markBOMPat = markBOM BPT.P_PMark
  val markBOMVarPat = markBOM BPT.P_VPMark
  val markBOMSE = markBOM BPT.SE_Mark

);


BOMDecls
	: Definition+
		=> (Definition)
	;


Definition
	: "extern" CRetTy Name "(" (CArgTy ("," CArgTy)* )? ")" Attrs ";"
		=> (markBOMDefn(KW_extern_SPAN,
		BPT.D_Extern(CF.CFun{
			var = Name,
			name = Atom.toString Name,
			retTy = CRetTy,
			argTys = flatten SR,
			varArg = false,
			attrs = Attrs
		      })))
	| "typedef" Name "=" BOMType ";"
		=> (markBOMDefn(KW_typedef_SPAN, BPT.D_TypeDef(Name, BOMType)))
	| "define" optInline HLOpId FunParams ReturnTy ("=" BOMExp)? ";"
		=> (markBOMDefn(FULL_SPAN, let val (p1, p2) = FunParams in
		      BPT.D_Define(optInline, HLOpId, p1, p2, ReturnTy, SR)
		    end))
	;

CRetTy
	: "void"	=> (CF.VoidTy)
	| CArgTy	=> (CArgTy)
	;

CArgTy
	: RawType	=> (CF.BaseTy RawType)
	| "void" "*"	=> (CF.PointerTy)
	;

Attrs
	: (* empty *)	=> ([])
	| "__attribute__" "(" "(" Attr ("," Attr)* ")" ")"
		=> (Attr :: SR)
	;

Attr
	: "pure"	=> (CF.A_pure)
	| "alloc"	=> (CF.A_alloc)
	| "noreturn"	=> (CF.A_noreturn)
	;

ReturnTy
	: "noreturn"		=> (NONE)
	| ":" BOMType		=> (SOME[BOMType])
	| ":" "(" TypeList ")"	=> (SOME TypeList)
	;

optInline
	: (* empty *)	=> (false)
	| "inline"	=> (true)
	;

FunParams
	: "(" Params ("/" Params)? ")"		=> (Params, case SR of SOME l => l | _ => [])
	;

Params
	: (VarPat ("," VarPat)* )?		=> (flatten SR)
	;

BOMType
	: "addr" "(" BOMType ")"		=> (markBOMTy(FULL_SPAN, BPT.T_Addr(BOMType)))
	| "any"					=> (markBOMTy(FULL_SPAN, BPT.T_Any))
	| "enum" "(" POSINT ")"			=> (markBOMTy(FULL_SPAN, BPT.T_Enum(Word.fromLargeInt POSINT)))
	| RawType				=> (markBOMTy(FULL_SPAN, BPT.T_Raw RawType))
	| "!" "[" BOMType ("," BOMType)* "]"	=> (markBOMTy(FULL_SPAN, BPT.T_Tuple(true, BOMType :: SR)))
	| "[" BOMType ("," BOMType)* "]"	=> (markBOMTy(FULL_SPAN, BPT.T_Tuple(false, BOMType :: SR)))
	| "fun" "(" TypeList "/" TypeList "->" TypeList ")"
						=> (markBOMTy(FULL_SPAN, BPT.T_Fun(TypeList1, TypeList2, TypeList3)))
	| "cont" "(" TypeList ")"		=> (markBOMTy(FULL_SPAN, BPT.T_Cont TypeList))
	| "vproc"				=> (markBOMTy(FULL_SPAN, BPT.T_VProc))
	| QualifiedId				=> (markBOMTy(FULL_SPAN, BPT.T_TyCon QualifiedId))
	;

TypeList
	: (BOMType ("," BOMType)* )?  => (flatten SR)
	;

RawType
	: "byte"	=> (BPT.T_Byte)
	| "short"	=> (BPT.T_Short)
	| "int"		=> (BPT.T_Int)
	| "long"	=> (BPT.T_Long)
	| "float"	=> (BPT.T_Float)
	| "double"	=> (BPT.T_Double)
	| "vec128"	=> (BPT.T_Vec128)
	;

BOMExp
	: "let" LHS "=" RHS BOMExp
		=> (markBOMExp(FULL_SPAN, BPT.E_Let(LHS, RHS, BOMExp)))
	| "do" RHS BOMExp
		=> (markBOMExp(FULL_SPAN, BPT.E_Let([], RHS, BOMExp)))
	| "fun" BOMLambda ("and" BOMLambda)* BOMExp
		=> (markBOMExp(FULL_SPAN, BPT.E_Fun(BOMLambda::SR, BOMExp)))
	| "cont" CLambda BOMExp
		=> (markBOMExp(FULL_SPAN, BPT.E_Cont(CLambda, BOMExp)))
	| "if" SimpleExp "then" BOMExp "else" BOMExp
		=> (markBOMExp(FULL_SPAN, BPT.E_If(SimpleExp, BOMExp1, BOMExp2)))
        | "case" SimpleExp "of" Rules ("|" Default)? "end"
		=> (markBOMExp(FULL_SPAN, BPT.E_Case(SimpleExp, Rules, SR)))
	| "apply" QualifiedId "(" Args ("/" Args)? ")"
		=> (markBOMExp(FULL_SPAN, BPT.E_Apply(QualifiedId, Args, Option.getOpt(SR, []))))
	| "throw" QualifiedId "(" Args ")"
		=> (markBOMExp(FULL_SPAN, BPT.E_Throw(QualifiedId, Args)))
	| "return" "(" Args ")"
		=> (markBOMExp(FULL_SPAN, BPT.E_Return Args))
	| "hlop" HLOpQId "(" Args ("/" Args)? ")"
		=> (markBOMExp(FULL_SPAN, BPT.E_HLOpApply(HLOpQId, Args, Option.getOpt(SR, []))))
	;

BOMLambda
	: Name FunParams ":" FunReturnTy "=" BOMExp
		=> (let val (p1, p2) = FunParams in (Name, p1, p2, FunReturnTy, BOMExp) end)
	;

FunReturnTy
	: BOMType			=> ([BOMType])
	| "(" TypeList ")"		=> (TypeList)
	;

CLambda
	: Name "(" Params ")" "=" BOMExp	=> (Name, Params, [], [], BOMExp)
	;

LHS
	: VarPat			=> ([VarPat])
	| "(" Params ")"		=> (Params)
	;

RHS
	: BOMExp			=> (markBOMRHS(FULL_SPAN, BPT.RHS_Exp BOMExp))
	| NonSelectExp			=> (markBOMRHS(FULL_SPAN, BPT.RHS_SimpleExp NonSelectExp))
	| "#" POSINT "(" SimpleExp ")" (":=" SimpleExp)?
		=> (markBOMRHS(FULL_SPAN, case SR
		     of SOME e => BPT.RHS_Update(Int.fromLarge POSINT, SimpleExp, e)
		      | NONE => BPT.RHS_SimpleExp(BPT.SE_Select(Int.fromLarge POSINT, SimpleExp))
		    (* end case *)))
	| "promote" "(" SimpleExp ")"	=> (markBOMRHS(FULL_SPAN, BPT.RHS_Promote SimpleExp))
	| "ccall" Name "(" Args ")"	=> (markBOMRHS(FULL_SPAN, BPT.RHS_CCall(Name, Args)))
	| "vpstore" "(" POSINT "," SimpleExp "," SimpleExp ")"
					=> (markBOMRHS(FULL_SPAN, BPT.RHS_VPStore(POSINT, SimpleExp1, SimpleExp2)))
        | "pmlvar" QualifiedId
 	                                => (markBOMRHS(FULL_SPAN, BPT.RHS_PMLVar QualifiedId))
	;

NonSelectExp
	: "alloc" "(" Args ")"		=> (markBOMSE(FULL_SPAN, BPT.SE_Alloc Args))
	| "wrap" "(" SimpleExp ")"	=> (markBOMSE(FULL_SPAN, BPT.SE_Wrap SimpleExp))
	| "&" POSINT "(" SimpleExp ")"	=> (markBOMSE(FULL_SPAN, BPT.SE_AddrOf(Int.fromLarge POSINT, SimpleExp)))
	| "unwrap" "(" SimpleExp ")"	=> (markBOMSE(FULL_SPAN, BPT.SE_Unwrap SimpleExp))
	| QualifiedId ("(" Args ")")?	=> (case SR
					     of NONE => markBOMSE(FULL_SPAN, BPT.SE_Var QualifiedId)
					      | SOME args => markBOMSE(FULL_SPAN, BPT.SE_Prim(QualifiedId, args)))
	| "(" BOMType ")" SimpleExp	=> (markBOMSE(FULL_SPAN, BPT.SE_Cast(BOMType, SimpleExp)))
	| Literal			=> (markBOMSE(FULL_SPAN, BPT.SE_Const(Literal)))
	| ML_STRING			=> (markBOMSE(FULL_SPAN, BPT.SE_MLString(ML_STRING)))
	| "host_vproc"			=> (markBOMSE(FULL_SPAN, BPT.SE_HostVProc))
	| "vpload" "(" POSINT "," SimpleExp ")"
					=> (markBOMSE(FULL_SPAN, BPT.SE_VPLoad(POSINT, SimpleExp)))
	;

SimpleExp
	: NonSelectExp			=> (NonSelectExp)
	| "#" POSINT "(" SimpleExp ")"	=> (BPT.SE_Select(Int.fromLarge POSINT, SimpleExp))
	;

Args
	: (SimpleExp ("," SimpleExp)* )?	=> (flatten SR)
	;

Rules
	: Rule ("|" Rule)*		=> (Rule :: SR)
	;

Rule
	: QualifiedId "(" VarPat ("," VarPat)* ")" "=>" BOMExp
					=> (markBOMPat(FULL_SPAN, BPT.P_DCon(QualifiedId, VarPat::SR)), BOMExp)
	| Literal "=>" BOMExp		=> (markBOMPat(FULL_SPAN, BPT.P_Const Literal), BOMExp)
	;

Default
	: VarPat "=>" BOMExp		=> (VarPat, BOMExp)
	;

VarPat
	: "_" (":" BOMType)?		=> (markBOMVarPat(FULL_SPAN, BPT.P_Wild SR))
	| Name ":" BOMType		=> (markBOMVarPat(FULL_SPAN, BPT.P_Var(Name, BOMType)))
	;

Literal
	: "enum" "(" POSINT ")" (":" BOMType)?
		=> (let
		    val w = Word.fromLargeInt POSINT
		    in
		      case SR
		       of NONE => (Literal.Enum w, BPT.T_Enum w)
			| SOME ty => (Literal.Enum w, ty)
		      (* end case *)
		    end)
        | "tag" "(" Name ")"
                 => (Literal.Tag (Atom.toString Name), BPT.T_Any)
	| "$" POSINT
		=> (Literal.StateVal(Word.fromLargeInt POSINT), BPT.T_Any)
	| Int (":" IntTy)?
		=> (case SR
		   of NONE => (Literal.Int Int, dfltIntTy)
		    | SOME ty => (Literal.Int Int, ty)
		  (* end case *))
	| FLOAT (":" FloatTy)?
		=> (case SR
		   of NONE => (Literal.Float FLOAT, dfltFloatTy)
		    | SOME ty => (Literal.Float FLOAT, ty)
		  (* end case *))
	| STRING
		=> (Literal.String STRING, dfltStringTy)
	;

IntTy	: "byte"	=> (BPT.T_Raw BPT.T_Byte)
	| "short"	=> (BPT.T_Raw BPT.T_Short)
	| "int"		=> (BPT.T_Raw BPT.T_Int)
	| "long"	=> (BPT.T_Raw BPT.T_Long)
	;

FloatTy	: "float"	=> (BPT.T_Raw BPT.T_Float)
	| "double"	=> (BPT.T_Raw BPT.T_Double)
	;

HLOpId	: HLOP	=> (case HLOP of [id] => id | _ => raise Fail "expected hlop id but got qualified id")
	;

HLOpQId : HLOP => (case HLOP
		  of [] => raise Fail "impossible"
		   | [id] => {span=FULL_SPAN, tree=([], id)}
		   | ids => {span=FULL_SPAN, tree=(List.take(ids, List.length ids - 1), List.last ids)})
        ;
