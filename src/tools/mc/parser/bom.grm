(* hlop-def.grm
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * TODO:
 *	add datatype definitions
 *	rewrite rules
 *)

%name HLOpDef;

%tokens
	: KW_addr	("addr")
	| KW_alloc	("alloc")
(*	| KW_and	("and")			*)
	| KW_any	("any")
	| KW_apply	("apply")
	| KW_attribute	("__attribute__")
	| KW_byte	("byte")
(*	| KW_case	("case")		*)
	| KW_ccall	("ccall")
	| KW_cont	("cont")
(*	| KW_datatype	("datatype")		*)
	| KW_define	("define")
	| KW_do		("do")   
	| KW_double	("double")
(*	| KW_else	("else")		*)
(*	| KW_end	("end")			*)
	| KW_enum	("enum")
	| KW_extern	("extern")
	| KW_float	("float")
(*	| KW_fun	("fun")			*)
	| KW_host_vproc ("host_vproc")
(*	| KW_if		("if")			*)
	| KW_inline	("inline")
	| KW_int	("int")
(*	| KW_let	("let")			*)
	| KW_long	("long")
	| KW_module	("module")
	| KW_noreturn	("noreturn")
(*	| KW_of		("of")			*)
	| KW_promote	("promote")
	| KW_pure	("pure")
        | KW_return	("return")
	| KW_short	("short")
	| KW_tag        ("tag")
(*	| KW_then	("then")		*)
	| KW_throw	("throw")
	| KW_typedef	("typedef")
	| KW_unwrap	("unwrap")
        | KW_use_rw     ("use_rw")
	| KW_vec128	("vec128")
	| KW_void	("void")
	| KW_vproc	("vproc")
	| KW_vpload	("vpload")
	| KW_vpstore	("vpstore")
	| KW_wrap	("wrap")
(*	| LP		("(")			*)
(*	| RP		(")")			*)
(*	| LB		("[")			*)
(*	| RB		("]")			*)
	| HASH		("#")
(*	| STAR		("*")			*)
(*	| COMMA		(",")			*)
(*	| EQ		("=")			*)
(*	| COLON		(":")			*)
(*	| SLASH		("/")			*)
(*	| SEMI		(";")			*)
(*	| BAR		("|")			*)
(*	| WILD		("_")			*)
(*	| BANG		("!")			*)
(*	| AMP		("&")			*)
	| DS		("$")
	| ASSIGN	(":=")
(*	| DARROW	("=>")			*)
(*	| ARROW		("->")			*)
(*	| ID of Atom.atom			*)
	| HLOP of Atom.atom
	| POSINT of IntInf.int		(* positive integer *)
	| NEGINT of IntInf.int		(* negative integer *)
(*	| FLOAT of FloatLit.float		*)
(*	| STRING of string			*)
	| ML_STRING of string
	;

%defs(
    structure PT = HLOpDefPT
    structure CF = CFunctions

    fun flatten NONE = []
      | flatten (SOME(x, xs)) = x::xs

  (* default types for literals *)
    val dfltIntTy = PT.T_Raw(BOMTy.T_Int)
    val dfltFloatTy = PT.T_Raw(BOMTy.T_Float)
    val dfltStringTy = PT.T_Any (* FIXME *)
);


BOMDecls
	: Definition+
		=> (Definition)
	;


Definition
	: "extern" CRetTy ID "(" (CArgTy ("," CArgTy)* )? ")" Attrs ";"
		=> (PT.Extern(CF.CFun{
			var = ID,
			name = Atom.toString ID,
			retTy = CRetTy,
			argTys = flatten SR,
			attrs = Attrs
		      }))
	| "typedef" ID "=" BOMType ";"
		=> (PT.TypeDef(ID, BOMType))
	| "define" optInline HLOP FunParams ReturnTy ("=" BOMExp)? ";"
		=> (let val (p1, p2) = FunParams in
		      PT.Define(optInline, HLOP, p1, p2, ReturnTy, SR)
		    end)
        | "use_rw" (ID ("," ID)*)? ";"
                => (PT.RWImport (flatten SR))
	;

CRetTy
	: "void"	=> (CF.VoidTy)
	| CArgTy	=> (CArgTy)
	;

CArgTy
	: RawType	=> (CF.BaseTy RawType)
	| "void" "*"	=> (CF.PointerTy)
	;

Attrs
	: (* empty *)	=> ([])
	| "__attribute__" "(" "(" Attr ("," Attr)* ")" ")"
		=> (Attr :: SR)
	;

Attr
	: "pure"	=> (CFunctions.A_pure)
	| "alloc"	=> (CFunctions.A_alloc)
	| "noreturn"	=> (CFunctions.A_noreturn)
	;

ReturnTy
	: "noreturn"		=> (NONE)
	| ":" BOMType		=> (SOME[BOMType])
	| ":" "(" TypeList ")"	=> (SOME TypeList)
	;

optInline
	: (* empty *)	=> (false)
	| "inline"	=> (true)
	;

FunParams
	: "(" Params ("/" Params)? ")"		=> (Params, case SR of SOME l => l | _ => [])
	;

Params
	: (VarPat ("," VarPat)* )?		=> (flatten SR)
	;

BOMType
	: "addr" "(" BOMType ")"		=> (PT.T_Addr(BOMType))
	| "any"					=> (PT.T_Any)
	| "enum" "(" POSINT ")"			=> (PT.T_Enum(Word.fromLargeInt POSINT))
	| RawType				=> (PT.T_Raw RawType)
	| "!" "[" BOMType ("," BOMType)* "]"	=> (PT.T_Tuple(true, BOMType :: SR))
	| "[" BOMType ("," BOMType)* "]"	=> (PT.T_Tuple(false, BOMType :: SR))
	| "fun" "(" TypeList "/" TypeList "->" TypeList ")"
						=> (PT.T_Fun(TypeList1, TypeList2, TypeList3))
	| "cont" "(" TypeList ")"		=> (PT.T_Cont TypeList)
	| "vproc"				=> (PT.T_VProc)
	| ID					=> (PT.T_TyCon ID)
	;

TypeList
	: (BOMType ("," BOMType)* )?  => (flatten SR)
	;

RawType
	: "byte"	=> (PT.T_Byte)
	| "short"	=> (PT.T_Short)
	| "int"		=> (PT.T_Int)
	| "long"	=> (PT.T_Long)
	| "float"	=> (PT.T_Float)
	| "double"	=> (PT.T_Double)
	| "vec128"	=> (PT.T_Vec128)
	;

BOMExp
	: "let" LHS "=" RHS BOMExp			=> (PT.Let(LHS, RHS, BOMExp))
	| "do" RHS BOMExp				=> (PT.Let([], RHS, BOMExp))
	| "fun" BOMLambda ("and" BOMLambda)* BOMExp	=> (PT.Fun(BOMLambda::SR, BOMExp))
	| "cont" CLambda BOMExp				=> (PT.Cont(CLambda, BOMExp))
	| "if" SimpleExp "then" BOMExp "else" BOMExp	=> (PT.If(SimpleExp, BOMExp1, BOMExp2))
        | "case" SimpleExp "of" Rules ("|" Default)? "end" => (PT.Case(SimpleExp, Rules, SR))
	| "apply" ID "(" Args ("/" Args)? ")"		=> (PT.Apply(ID, Args, Option.getOpt(SR, [])))
	| "throw" ID "(" Args ")"			=> (PT.Throw(ID, Args))
	| "return" "(" Args ")"				=> (PT.Return Args)
	| HLOP "(" Args ("/" Args)? ")"
		=> (PT.HLOpApply(HLOP, Args, Option.getOpt(SR, [])))
	;

BOMLambda
	: ID FunParams ":" FunReturnTy "=" BOMExp
		=> (let val (p1, p2) = FunParams in (ID, p1, p2, FunReturnTy, BOMExp) end)
	;

FunReturnTy
	: BOMType			=> ([BOMType])
	| "(" TypeList ")"		=> (TypeList)
	;

CLambda
	: ID "(" Params ")" "=" BOMExp	=> (ID, Params, [], [], BOMExp)
	;

LHS
	: VarPat			=> ([VarPat])
	| "(" Params ")"		=> (Params)
	;

RHS
	: BOMExp			=> (PT.Exp BOMExp)
	| NonSelectExp			=> (PT.SimpleExp NonSelectExp)
	| "#" POSINT "(" SimpleExp ")" (":=" SimpleExp)?
		=> (case SR
		     of SOME e => PT.Update(Int.fromLarge POSINT, SimpleExp, e)
		      | NONE => PT.SimpleExp(PT.Select(Int.fromLarge POSINT, SimpleExp))
		    (* end case *))
	| "alloc" "(" Args ")"		=> (PT.Alloc Args)
	| "promote" "(" SimpleExp ")"	=> (PT.Promote SimpleExp)
	| "wrap" "(" SimpleExp ")"	=> (PT.Wrap SimpleExp)
	| "ccall" ID "(" Args ")"	=> (PT.CCall(ID, Args))
	;

NonSelectExp
	: ID				=> (PT.Var ID)
	| "&" POSINT "(" SimpleExp ")"	=> (PT.AddrOf(Int.fromLarge POSINT, SimpleExp))
	| "unwrap" "(" SimpleExp ")"	=> (PT.Unwrap SimpleExp)
	| ID "(" Args ")"		=> (PT.Prim(ID, Args))
	| "(" BOMType ")" SimpleExp	=> (PT.Cast(BOMType, SimpleExp))
	| Literal			=> (PT.Const(Literal))
	| ML_STRING			=> (PT.MLString(ML_STRING))
	| "host_vproc"			=> (PT.HostVProc)
	| "vpload" "(" POSINT "," SimpleExp ")"
					=> (PT.VPLoad(POSINT, SimpleExp))
	| "vpstore" "(" POSINT "," SimpleExp "," SimpleExp ")"
					=> (PT.VPStore(POSINT, SimpleExp1, SimpleExp2))
	;

SimpleExp
	: NonSelectExp			=> (NonSelectExp)
	| "#" POSINT "(" SimpleExp ")"	=> (PT.Select(Int.fromLarge POSINT, SimpleExp))
	;

Args
	: (SimpleExp ("," SimpleExp)* )?	=> (flatten SR)
	;

Rules
	: Rule ("|" Rule)*		=> (Rule :: SR)
	;

Rule
	: ID "(" VarPat ("," VarPat)* ")" "=>" BOMExp
					=> (PT.DConPat(ID, VarPat::SR), BOMExp)
	| Literal "=>" BOMExp		=> (PT.ConstPat Literal, BOMExp)
	;

Default
	: VarPat "=>" BOMExp		=> (VarPat, BOMExp)
	;

VarPat
	: "_" (":" BOMType)?		=> (PT.WildPat SR)
	| ID ":" BOMType		=> (PT.VarPat(ID, BOMType))
	;

Literal
	: "enum" "(" POSINT ")" (":" BOMType)?
		=> (let
		    val w = Word.fromLargeInt POSINT
		    in
		      case SR
		       of NONE => (Literal.Enum w, PT.T_Enum w)
			| SOME ty => (Literal.Enum w, ty)
		      (* end case *)
		    end)
        | "tag" "(" ID ")"
                 => (Literal.Tag (Atom.toString ID), PT.T_Any)
	| "$" POSINT
		=> (Literal.StateVal(Word.fromLargeInt POSINT), PT.T_Any)
	| Int (":" IntTy)?
		=> (case SR
		   of NONE => (Literal.Int Int, dfltIntTy)
		    | SOME ty => (Literal.Int Int, ty)
		  (* end case *))
	| FLOAT (":" FloatTy)?
		=> (case SR
		   of NONE => (Literal.Float FLOAT, dfltFloatTy)
		    | SOME ty => (Literal.Float FLOAT, ty)
		  (* end case *))
	| STRING
		=> (Literal.String STRING, dfltStringTy)
	;

IntTy	: "byte"	=> (PT.T_Raw PT.T_Byte)
	| "short"	=> (PT.T_Raw PT.T_Short)
	| "int"		=> (PT.T_Raw PT.T_Int)
	| "long"	=> (PT.T_Raw PT.T_Long)
	;

FloatTy	: "float"	=> (PT.T_Raw PT.T_Float)
	| "double"	=> (PT.T_Raw PT.T_Double)
	;

Int	: POSINT	=> (POSINT)
	| NEGINT	=> (NEGINT)
	;
